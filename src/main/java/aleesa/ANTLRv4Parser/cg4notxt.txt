lk,  grammarType grammar
  identifier C
    ruleSpec primaryExpression:Identifier|Constant|StringLiteral+|'('expression')'|genericSelection|'__extension__'?'('compoundStatement')'|'__builtin_va_arg''('unaryExpression','typeName')'|'__builtin_offsetof''('typeName','unaryExpression')';
      parserRuleSpec primaryExpression:Identifier|Constant|StringLiteral+|'('expression')'|genericSelection|'__extension__'?'('compoundStatement')'|'__builtin_va_arg''('unaryExpression','typeName')'|'__builtin_offsetof''('typeName','unaryExpression')';
        ruleBlock Identifier|Constant|StringLiteral+|'('expression')'|genericSelection|'__extension__'?'('compoundStatement')'|'__builtin_va_arg''('unaryExpression','typeName')'|'__builtin_offsetof''('typeName','unaryExpression')'
          ruleAltList Identifier|Constant|StringLiteral+|'('expression')'|genericSelection|'__extension__'?'('compoundStatement')'|'__builtin_va_arg''('unaryExpression','typeName')'|'__builtin_offsetof''('typeName','unaryExpression')'
            labeledAlt Identifier
              alternative Identifier
                element Identifier
                  atom Identifier
                    terminal Identifier
            labeledAlt Constant
              alternative Constant
                element Constant
                  atom Constant
                    terminal Constant
            labeledAlt StringLiteral+
              alternative StringLiteral+
                element StringLiteral+
                  atom StringLiteral
                    terminal StringLiteral
                  ebnfSuffix +
            labeledAlt '('expression')'
              alternative '('expression')'
                element '('
                  atom '('
                    terminal '('
                element expression
                  atom expression
                    ruleref expression
                element ')'
                  atom ')'
                    terminal ')'
            labeledAlt genericSelection
              alternative genericSelection
                element genericSelection
                  atom genericSelection
                    ruleref genericSelection
            labeledAlt '__extension__'?'('compoundStatement')'
              alternative '__extension__'?'('compoundStatement')'
                element '__extension__'?
                  atom '__extension__'
                    terminal '__extension__'
                  ebnfSuffix ?
                element '('
                  atom '('
                    terminal '('
                element compoundStatement
                  atom compoundStatement
                    ruleref compoundStatement
                element ')'
                  atom ')'
                    terminal ')'
            labeledAlt '__builtin_va_arg''('unaryExpression','typeName')'
              alternative '__builtin_va_arg''('unaryExpression','typeName')'
                element '__builtin_va_arg'
                  atom '__builtin_va_arg'
                    terminal '__builtin_va_arg'
                element '('
                  atom '('
                    terminal '('
                element unaryExpression
                  atom unaryExpression
                    ruleref unaryExpression
                element ','
                  atom ','
                    terminal ','
                element typeName
                  atom typeName
                    ruleref typeName
                element ')'
                  atom ')'
                    terminal ')'
            labeledAlt '__builtin_offsetof''('typeName','unaryExpression')'
              alternative '__builtin_offsetof''('typeName','unaryExpression')'
                element '__builtin_offsetof'
                  atom '__builtin_offsetof'
                    terminal '__builtin_offsetof'
                element '('
                  atom '('
                    terminal '('
                element typeName
                  atom typeName
                    ruleref typeName
                element ','
                  atom ','
                    terminal ','
                element unaryExpression
                  atom unaryExpression
                    ruleref unaryExpression
                element ')'
                  atom ')'
                    terminal ')'
        exceptionGroup 
    ruleSpec genericSelection:'_Generic''('assignmentExpression','genericAssocList')';
      parserRuleSpec genericSelection:'_Generic''('assignmentExpression','genericAssocList')';
        ruleBlock '_Generic''('assignmentExpression','genericAssocList')'
          ruleAltList '_Generic''('assignmentExpression','genericAssocList')'
            labeledAlt '_Generic''('assignmentExpression','genericAssocList')'
              alternative '_Generic''('assignmentExpression','genericAssocList')'
                element '_Generic'
                  atom '_Generic'
                    terminal '_Generic'
                element '('
                  atom '('
                    terminal '('
                element assignmentExpression
                  atom assignmentExpression
                    ruleref assignmentExpression
                element ','
                  atom ','
                    terminal ','
                element genericAssocList
                  atom genericAssocList
                    ruleref genericAssocList
                element ')'
                  atom ')'
                    terminal ')'
        exceptionGroup 
    ruleSpec genericAssocList:genericAssociation|genericAssocList','genericAssociation;
      parserRuleSpec genericAssocList:genericAssociation|genericAssocList','genericAssociation;
        ruleBlock genericAssociation|genericAssocList','genericAssociation
          ruleAltList genericAssociation|genericAssocList','genericAssociation
            labeledAlt genericAssociation
              alternative genericAssociation
                element genericAssociation
                  atom genericAssociation
                    ruleref genericAssociation
            labeledAlt genericAssocList','genericAssociation
              alternative genericAssocList','genericAssociation
                element genericAssocList
                  atom genericAssocList
                    ruleref genericAssocList
                element ','
                  atom ','
                    terminal ','
                element genericAssociation
                  atom genericAssociation
                    ruleref genericAssociation
        exceptionGroup 
    ruleSpec genericAssociation:typeName':'assignmentExpression|'default'':'assignmentExpression;
      parserRuleSpec genericAssociation:typeName':'assignmentExpression|'default'':'assignmentExpression;
        ruleBlock typeName':'assignmentExpression|'default'':'assignmentExpression
          ruleAltList typeName':'assignmentExpression|'default'':'assignmentExpression
            labeledAlt typeName':'assignmentExpression
              alternative typeName':'assignmentExpression
                element typeName
                  atom typeName
                    ruleref typeName
                element ':'
                  atom ':'
                    terminal ':'
                element assignmentExpression
                  atom assignmentExpression
                    ruleref assignmentExpression
            labeledAlt 'default'':'assignmentExpression
              alternative 'default'':'assignmentExpression
                element 'default'
                  atom 'default'
                    terminal 'default'
                element ':'
                  atom ':'
                    terminal ':'
                element assignmentExpression
                  atom assignmentExpression
                    ruleref assignmentExpression
        exceptionGroup 
    ruleSpec postfixExpression:primaryExpression|postfixExpression'['expression']'|postfixExpression'('argumentExpressionList?')'|postfixExpression'.'Identifier|postfixExpression'->'Identifier|postfixExpression'++'|postfixExpression'--'|'('typeName')''{'initializerList'}'|'('typeName')''{'initializerList',''}'|'__extension__''('typeName')''{'initializerList'}'|'__extension__''('typeName')''{'initializerList',''}';
      parserRuleSpec postfixExpression:primaryExpression|postfixExpression'['expression']'|postfixExpression'('argumentExpressionList?')'|postfixExpression'.'Identifier|postfixExpression'->'Identifier|postfixExpression'++'|postfixExpression'--'|'('typeName')''{'initializerList'}'|'('typeName')''{'initializerList',''}'|'__extension__''('typeName')''{'initializerList'}'|'__extension__''('typeName')''{'initializerList',''}';
        ruleBlock primaryExpression|postfixExpression'['expression']'|postfixExpression'('argumentExpressionList?')'|postfixExpression'.'Identifier|postfixExpression'->'Identifier|postfixExpression'++'|postfixExpression'--'|'('typeName')''{'initializerList'}'|'('typeName')''{'initializerList',''}'|'__extension__''('typeName')''{'initializerList'}'|'__extension__''('typeName')''{'initializerList',''}'
          ruleAltList primaryExpression|postfixExpression'['expression']'|postfixExpression'('argumentExpressionList?')'|postfixExpression'.'Identifier|postfixExpression'->'Identifier|postfixExpression'++'|postfixExpression'--'|'('typeName')''{'initializerList'}'|'('typeName')''{'initializerList',''}'|'__extension__''('typeName')''{'initializerList'}'|'__extension__''('typeName')''{'initializerList',''}'
            labeledAlt primaryExpression
              alternative primaryExpression
                element primaryExpression
                  atom primaryExpression
                    ruleref primaryExpression
            labeledAlt postfixExpression'['expression']'
              alternative postfixExpression'['expression']'
                element postfixExpression
                  atom postfixExpression
                    ruleref postfixExpression
                element '['
                  atom '['
                    terminal '['
                element expression
                  atom expression
                    ruleref expression
                element ']'
                  atom ']'
                    terminal ']'
            labeledAlt postfixExpression'('argumentExpressionList?')'
              alternative postfixExpression'('argumentExpressionList?')'
                element postfixExpression
                  atom postfixExpression
                    ruleref postfixExpression
                element '('
                  atom '('
                    terminal '('
                element argumentExpressionList?
                  atom argumentExpressionList
                    ruleref argumentExpressionList
                  ebnfSuffix ?
                element ')'
                  atom ')'
                    terminal ')'
            labeledAlt postfixExpression'.'Identifier
              alternative postfixExpression'.'Identifier
                element postfixExpression
                  atom postfixExpression
                    ruleref postfixExpression
                element '.'
                  atom '.'
                    terminal '.'
                element Identifier
                  atom Identifier
                    terminal Identifier
            labeledAlt postfixExpression'->'Identifier
              alternative postfixExpression'->'Identifier
                element postfixExpression
                  atom postfixExpression
                    ruleref postfixExpression
                element '->'
                  atom '->'
                    terminal '->'
                element Identifier
                  atom Identifier
                    terminal Identifier
            labeledAlt postfixExpression'++'
              alternative postfixExpression'++'
                element postfixExpression
                  atom postfixExpression
                    ruleref postfixExpression
                element '++'
                  atom '++'
                    terminal '++'
            labeledAlt postfixExpression'--'
              alternative postfixExpression'--'
                element postfixExpression
                  atom postfixExpression
                    ruleref postfixExpression
                element '--'
                  atom '--'
                    terminal '--'
            labeledAlt '('typeName')''{'initializerList'}'
              alternative '('typeName')''{'initializerList'}'
                element '('
                  atom '('
                    terminal '('
                element typeName
                  atom typeName
                    ruleref typeName
                element ')'
                  atom ')'
                    terminal ')'
                element '{'
                  atom '{'
                    terminal '{'
                element initializerList
                  atom initializerList
                    ruleref initializerList
                element '}'
                  atom '}'
                    terminal '}'
            labeledAlt '('typeName')''{'initializerList',''}'
              alternative '('typeName')''{'initializerList',''}'
                element '('
                  atom '('
                    terminal '('
                element typeName
                  atom typeName
                    ruleref typeName
                element ')'
                  atom ')'
                    terminal ')'
                element '{'
                  atom '{'
                    terminal '{'
                element initializerList
                  atom initializerList
                    ruleref initializerList
                element ','
                  atom ','
                    terminal ','
                element '}'
                  atom '}'
                    terminal '}'
            labeledAlt '__extension__''('typeName')''{'initializerList'}'
              alternative '__extension__''('typeName')''{'initializerList'}'
                element '__extension__'
                  atom '__extension__'
                    terminal '__extension__'
                element '('
                  atom '('
                    terminal '('
                element typeName
                  atom typeName
                    ruleref typeName
                element ')'
                  atom ')'
                    terminal ')'
                element '{'
                  atom '{'
                    terminal '{'
                element initializerList
                  atom initializerList
                    ruleref initializerList
                element '}'
                  atom '}'
                    terminal '}'
            labeledAlt '__extension__''('typeName')''{'initializerList',''}'
              alternative '__extension__''('typeName')''{'initializerList',''}'
                element '__extension__'
                  atom '__extension__'
                    terminal '__extension__'
                element '('
                  atom '('
                    terminal '('
                element typeName
                  atom typeName
                    ruleref typeName
                element ')'
                  atom ')'
                    terminal ')'
                element '{'
                  atom '{'
                    terminal '{'
                element initializerList
                  atom initializerList
                    ruleref initializerList
                element ','
                  atom ','
                    terminal ','
                element '}'
                  atom '}'
                    terminal '}'
        exceptionGroup 
    ruleSpec argumentExpressionList:assignmentExpression|argumentExpressionList','assignmentExpression;
      parserRuleSpec argumentExpressionList:assignmentExpression|argumentExpressionList','assignmentExpression;
        ruleBlock assignmentExpression|argumentExpressionList','assignmentExpression
          ruleAltList assignmentExpression|argumentExpressionList','assignmentExpression
            labeledAlt assignmentExpression
              alternative assignmentExpression
                element assignmentExpression
                  atom assignmentExpression
                    ruleref assignmentExpression
            labeledAlt argumentExpressionList','assignmentExpression
              alternative argumentExpressionList','assignmentExpression
                element argumentExpressionList
                  atom argumentExpressionList
                    ruleref argumentExpressionList
                element ','
                  atom ','
                    terminal ','
                element assignmentExpression
                  atom assignmentExpression
                    ruleref assignmentExpression
        exceptionGroup 
    ruleSpec unaryExpression:postfixExpression|'++'unaryExpression|'--'unaryExpression|unaryOperatorcastExpression|'sizeof'unaryExpression|'sizeof''('typeName')'|'_Alignof''('typeName')'|'&&'Identifier;
      parserRuleSpec unaryExpression:postfixExpression|'++'unaryExpression|'--'unaryExpression|unaryOperatorcastExpression|'sizeof'unaryExpression|'sizeof''('typeName')'|'_Alignof''('typeName')'|'&&'Identifier;
        ruleBlock postfixExpression|'++'unaryExpression|'--'unaryExpression|unaryOperatorcastExpression|'sizeof'unaryExpression|'sizeof''('typeName')'|'_Alignof''('typeName')'|'&&'Identifier
          ruleAltList postfixExpression|'++'unaryExpression|'--'unaryExpression|unaryOperatorcastExpression|'sizeof'unaryExpression|'sizeof''('typeName')'|'_Alignof''('typeName')'|'&&'Identifier
            labeledAlt postfixExpression
              alternative postfixExpression
                element postfixExpression
                  atom postfixExpression
                    ruleref postfixExpression
            labeledAlt '++'unaryExpression
              alternative '++'unaryExpression
                element '++'
                  atom '++'
                    terminal '++'
                element unaryExpression
                  atom unaryExpression
                    ruleref unaryExpression
            labeledAlt '--'unaryExpression
              alternative '--'unaryExpression
                element '--'
                  atom '--'
                    terminal '--'
                element unaryExpression
                  atom unaryExpression
                    ruleref unaryExpression
            labeledAlt unaryOperatorcastExpression
              alternative unaryOperatorcastExpression
                element unaryOperator
                  atom unaryOperator
                    ruleref unaryOperator
                element castExpression
                  atom castExpression
                    ruleref castExpression
            labeledAlt 'sizeof'unaryExpression
              alternative 'sizeof'unaryExpression
                element 'sizeof'
                  atom 'sizeof'
                    terminal 'sizeof'
                element unaryExpression
                  atom unaryExpression
                    ruleref unaryExpression
            labeledAlt 'sizeof''('typeName')'
              alternative 'sizeof''('typeName')'
                element 'sizeof'
                  atom 'sizeof'
                    terminal 'sizeof'
                element '('
                  atom '('
                    terminal '('
                element typeName
                  atom typeName
                    ruleref typeName
                element ')'
                  atom ')'
                    terminal ')'
            labeledAlt '_Alignof''('typeName')'
              alternative '_Alignof''('typeName')'
                element '_Alignof'
                  atom '_Alignof'
                    terminal '_Alignof'
                element '('
                  atom '('
                    terminal '('
                element typeName
                  atom typeName
                    ruleref typeName
                element ')'
                  atom ')'
                    terminal ')'
            labeledAlt '&&'Identifier
              alternative '&&'Identifier
                element '&&'
                  atom '&&'
                    terminal '&&'
                element Identifier
                  atom Identifier
                    terminal Identifier
        exceptionGroup 
    ruleSpec unaryOperator:'&'|'*'|'+'|'-'|'~'|'!';
      parserRuleSpec unaryOperator:'&'|'*'|'+'|'-'|'~'|'!';
        ruleBlock '&'|'*'|'+'|'-'|'~'|'!'
          ruleAltList '&'|'*'|'+'|'-'|'~'|'!'
            labeledAlt '&'
              alternative '&'
                element '&'
                  atom '&'
                    terminal '&'
            labeledAlt '*'
              alternative '*'
                element '*'
                  atom '*'
                    terminal '*'
            labeledAlt '+'
              alternative '+'
                element '+'
                  atom '+'
                    terminal '+'
            labeledAlt '-'
              alternative '-'
                element '-'
                  atom '-'
                    terminal '-'
            labeledAlt '~'
              alternative '~'
                element '~'
                  atom '~'
                    terminal '~'
            labeledAlt '!'
              alternative '!'
                element '!'
                  atom '!'
                    terminal '!'
        exceptionGroup 
    ruleSpec castExpression:unaryExpression|'('typeName')'castExpression|'__extension__''('typeName')'castExpression|DigitSequence;
      parserRuleSpec castExpression:unaryExpression|'('typeName')'castExpression|'__extension__''('typeName')'castExpression|DigitSequence;
        ruleBlock unaryExpression|'('typeName')'castExpression|'__extension__''('typeName')'castExpression|DigitSequence
          ruleAltList unaryExpression|'('typeName')'castExpression|'__extension__''('typeName')'castExpression|DigitSequence
            labeledAlt unaryExpression
              alternative unaryExpression
                element unaryExpression
                  atom unaryExpression
                    ruleref unaryExpression
            labeledAlt '('typeName')'castExpression
              alternative '('typeName')'castExpression
                element '('
                  atom '('
                    terminal '('
                element typeName
                  atom typeName
                    ruleref typeName
                element ')'
                  atom ')'
                    terminal ')'
                element castExpression
                  atom castExpression
                    ruleref castExpression
            labeledAlt '__extension__''('typeName')'castExpression
              alternative '__extension__''('typeName')'castExpression
                element '__extension__'
                  atom '__extension__'
                    terminal '__extension__'
                element '('
                  atom '('
                    terminal '('
                element typeName
                  atom typeName
                    ruleref typeName
                element ')'
                  atom ')'
                    terminal ')'
                element castExpression
                  atom castExpression
                    ruleref castExpression
            labeledAlt DigitSequence
              alternative DigitSequence
                element DigitSequence
                  atom DigitSequence
                    terminal DigitSequence
        exceptionGroup 
    ruleSpec multiplicativeExpression:castExpression|multiplicativeExpression'*'castExpression|multiplicativeExpression'/'castExpression|multiplicativeExpression'%'castExpression;
      parserRuleSpec multiplicativeExpression:castExpression|multiplicativeExpression'*'castExpression|multiplicativeExpression'/'castExpression|multiplicativeExpression'%'castExpression;
        ruleBlock castExpression|multiplicativeExpression'*'castExpression|multiplicativeExpression'/'castExpression|multiplicativeExpression'%'castExpression
          ruleAltList castExpression|multiplicativeExpression'*'castExpression|multiplicativeExpression'/'castExpression|multiplicativeExpression'%'castExpression
            labeledAlt castExpression
              alternative castExpression
                element castExpression
                  atom castExpression
                    ruleref castExpression
            labeledAlt multiplicativeExpression'*'castExpression
              alternative multiplicativeExpression'*'castExpression
                element multiplicativeExpression
                  atom multiplicativeExpression
                    ruleref multiplicativeExpression
                element '*'
                  atom '*'
                    terminal '*'
                element castExpression
                  atom castExpression
                    ruleref castExpression
            labeledAlt multiplicativeExpression'/'castExpression
              alternative multiplicativeExpression'/'castExpression
                element multiplicativeExpression
                  atom multiplicativeExpression
                    ruleref multiplicativeExpression
                element '/'
                  atom '/'
                    terminal '/'
                element castExpression
                  atom castExpression
                    ruleref castExpression
            labeledAlt multiplicativeExpression'%'castExpression
              alternative multiplicativeExpression'%'castExpression
                element multiplicativeExpression
                  atom multiplicativeExpression
                    ruleref multiplicativeExpression
                element '%'
                  atom '%'
                    terminal '%'
                element castExpression
                  atom castExpression
                    ruleref castExpression
        exceptionGroup 
    ruleSpec additiveExpression:multiplicativeExpression|additiveExpression'+'multiplicativeExpression|additiveExpression'-'multiplicativeExpression;
      parserRuleSpec additiveExpression:multiplicativeExpression|additiveExpression'+'multiplicativeExpression|additiveExpression'-'multiplicativeExpression;
        ruleBlock multiplicativeExpression|additiveExpression'+'multiplicativeExpression|additiveExpression'-'multiplicativeExpression
          ruleAltList multiplicativeExpression|additiveExpression'+'multiplicativeExpression|additiveExpression'-'multiplicativeExpression
            labeledAlt multiplicativeExpression
              alternative multiplicativeExpression
                element multiplicativeExpression
                  atom multiplicativeExpression
                    ruleref multiplicativeExpression
            labeledAlt additiveExpression'+'multiplicativeExpression
              alternative additiveExpression'+'multiplicativeExpression
                element additiveExpression
                  atom additiveExpression
                    ruleref additiveExpression
                element '+'
                  atom '+'
                    terminal '+'
                element multiplicativeExpression
                  atom multiplicativeExpression
                    ruleref multiplicativeExpression
            labeledAlt additiveExpression'-'multiplicativeExpression
              alternative additiveExpression'-'multiplicativeExpression
                element additiveExpression
                  atom additiveExpression
                    ruleref additiveExpression
                element '-'
                  atom '-'
                    terminal '-'
                element multiplicativeExpression
                  atom multiplicativeExpression
                    ruleref multiplicativeExpression
        exceptionGroup 
    ruleSpec shiftExpression:additiveExpression|shiftExpression'<<'additiveExpression|shiftExpression'>>'additiveExpression;
      parserRuleSpec shiftExpression:additiveExpression|shiftExpression'<<'additiveExpression|shiftExpression'>>'additiveExpression;
        ruleBlock additiveExpression|shiftExpression'<<'additiveExpression|shiftExpression'>>'additiveExpression
          ruleAltList additiveExpression|shiftExpression'<<'additiveExpression|shiftExpression'>>'additiveExpression
            labeledAlt additiveExpression
              alternative additiveExpression
                element additiveExpression
                  atom additiveExpression
                    ruleref additiveExpression
            labeledAlt shiftExpression'<<'additiveExpression
              alternative shiftExpression'<<'additiveExpression
                element shiftExpression
                  atom shiftExpression
                    ruleref shiftExpression
                element '<<'
                  atom '<<'
                    terminal '<<'
                element additiveExpression
                  atom additiveExpression
                    ruleref additiveExpression
            labeledAlt shiftExpression'>>'additiveExpression
              alternative shiftExpression'>>'additiveExpression
                element shiftExpression
                  atom shiftExpression
                    ruleref shiftExpression
                element '>>'
                  atom '>>'
                    terminal '>>'
                element additiveExpression
                  atom additiveExpression
                    ruleref additiveExpression
        exceptionGroup 
    ruleSpec relationalExpression:shiftExpression|relationalExpression'<'shiftExpression|relationalExpression'>'shiftExpression|relationalExpression'<='shiftExpression|relationalExpression'>='shiftExpression;
      parserRuleSpec relationalExpression:shiftExpression|relationalExpression'<'shiftExpression|relationalExpression'>'shiftExpression|relationalExpression'<='shiftExpression|relationalExpression'>='shiftExpression;
        ruleBlock shiftExpression|relationalExpression'<'shiftExpression|relationalExpression'>'shiftExpression|relationalExpression'<='shiftExpression|relationalExpression'>='shiftExpression
          ruleAltList shiftExpression|relationalExpression'<'shiftExpression|relationalExpression'>'shiftExpression|relationalExpression'<='shiftExpression|relationalExpression'>='shiftExpression
            labeledAlt shiftExpression
              alternative shiftExpression
                element shiftExpression
                  atom shiftExpression
                    ruleref shiftExpression
            labeledAlt relationalExpression'<'shiftExpression
              alternative relationalExpression'<'shiftExpression
                element relationalExpression
                  atom relationalExpression
                    ruleref relationalExpression
                element '<'
                  atom '<'
                    terminal '<'
                element shiftExpression
                  atom shiftExpression
                    ruleref shiftExpression
            labeledAlt relationalExpression'>'shiftExpression
              alternative relationalExpression'>'shiftExpression
                element relationalExpression
                  atom relationalExpression
                    ruleref relationalExpression
                element '>'
                  atom '>'
                    terminal '>'
                element shiftExpression
                  atom shiftExpression
                    ruleref shiftExpression
            labeledAlt relationalExpression'<='shiftExpression
              alternative relationalExpression'<='shiftExpression
                element relationalExpression
                  atom relationalExpression
                    ruleref relationalExpression
                element '<='
                  atom '<='
                    terminal '<='
                element shiftExpression
                  atom shiftExpression
                    ruleref shiftExpression
            labeledAlt relationalExpression'>='shiftExpression
              alternative relationalExpression'>='shiftExpression
                element relationalExpression
                  atom relationalExpression
                    ruleref relationalExpression
                element '>='
                  atom '>='
                    terminal '>='
                element shiftExpression
                  atom shiftExpression
                    ruleref shiftExpression
        exceptionGroup 
    ruleSpec equalityExpression:relationalExpression|equalityExpression'=='relationalExpression|equalityExpression'!='relationalExpression;
      parserRuleSpec equalityExpression:relationalExpression|equalityExpression'=='relationalExpression|equalityExpression'!='relationalExpression;
        ruleBlock relationalExpression|equalityExpression'=='relationalExpression|equalityExpression'!='relationalExpression
          ruleAltList relationalExpression|equalityExpression'=='relationalExpression|equalityExpression'!='relationalExpression
            labeledAlt relationalExpression
              alternative relationalExpression
                element relationalExpression
                  atom relationalExpression
                    ruleref relationalExpression
            labeledAlt equalityExpression'=='relationalExpression
              alternative equalityExpression'=='relationalExpression
                element equalityExpression
                  atom equalityExpression
                    ruleref equalityExpression
                element '=='
                  atom '=='
                    terminal '=='
                element relationalExpression
                  atom relationalExpression
                    ruleref relationalExpression
            labeledAlt equalityExpression'!='relationalExpression
              alternative equalityExpression'!='relationalExpression
                element equalityExpression
                  atom equalityExpression
                    ruleref equalityExpression
                element '!='
                  atom '!='
                    terminal '!='
                element relationalExpression
                  atom relationalExpression
                    ruleref relationalExpression
        exceptionGroup 
    ruleSpec andExpression:equalityExpression|andExpression'&'equalityExpression;
      parserRuleSpec andExpression:equalityExpression|andExpression'&'equalityExpression;
        ruleBlock equalityExpression|andExpression'&'equalityExpression
          ruleAltList equalityExpression|andExpression'&'equalityExpression
            labeledAlt equalityExpression
              alternative equalityExpression
                element equalityExpression
                  atom equalityExpression
                    ruleref equalityExpression
            labeledAlt andExpression'&'equalityExpression
              alternative andExpression'&'equalityExpression
                element andExpression
                  atom andExpression
                    ruleref andExpression
                element '&'
                  atom '&'
                    terminal '&'
                element equalityExpression
                  atom equalityExpression
                    ruleref equalityExpression
        exceptionGroup 
    ruleSpec exclusiveOrExpression:andExpression|exclusiveOrExpression'^'andExpression;
      parserRuleSpec exclusiveOrExpression:andExpression|exclusiveOrExpression'^'andExpression;
        ruleBlock andExpression|exclusiveOrExpression'^'andExpression
          ruleAltList andExpression|exclusiveOrExpression'^'andExpression
            labeledAlt andExpression
              alternative andExpression
                element andExpression
                  atom andExpression
                    ruleref andExpression
            labeledAlt exclusiveOrExpression'^'andExpression
              alternative exclusiveOrExpression'^'andExpression
                element exclusiveOrExpression
                  atom exclusiveOrExpression
                    ruleref exclusiveOrExpression
                element '^'
                  atom '^'
                    terminal '^'
                element andExpression
                  atom andExpression
                    ruleref andExpression
        exceptionGroup 
    ruleSpec inclusiveOrExpression:exclusiveOrExpression|inclusiveOrExpression'|'exclusiveOrExpression;
      parserRuleSpec inclusiveOrExpression:exclusiveOrExpression|inclusiveOrExpression'|'exclusiveOrExpression;
        ruleBlock exclusiveOrExpression|inclusiveOrExpression'|'exclusiveOrExpression
          ruleAltList exclusiveOrExpression|inclusiveOrExpression'|'exclusiveOrExpression
            labeledAlt exclusiveOrExpression
              alternative exclusiveOrExpression
                element exclusiveOrExpression
                  atom exclusiveOrExpression
                    ruleref exclusiveOrExpression
            labeledAlt inclusiveOrExpression'|'exclusiveOrExpression
              alternative inclusiveOrExpression'|'exclusiveOrExpression
                element inclusiveOrExpression
                  atom inclusiveOrExpression
                    ruleref inclusiveOrExpression
                element '|'
                  atom '|'
                    terminal '|'
                element exclusiveOrExpression
                  atom exclusiveOrExpression
                    ruleref exclusiveOrExpression
        exceptionGroup 
    ruleSpec logicalAndExpression:inclusiveOrExpression|logicalAndExpression'&&'inclusiveOrExpression;
      parserRuleSpec logicalAndExpression:inclusiveOrExpression|logicalAndExpression'&&'inclusiveOrExpression;
        ruleBlock inclusiveOrExpression|logicalAndExpression'&&'inclusiveOrExpression
          ruleAltList inclusiveOrExpression|logicalAndExpression'&&'inclusiveOrExpression
            labeledAlt inclusiveOrExpression
              alternative inclusiveOrExpression
                element inclusiveOrExpression
                  atom inclusiveOrExpression
                    ruleref inclusiveOrExpression
            labeledAlt logicalAndExpression'&&'inclusiveOrExpression
              alternative logicalAndExpression'&&'inclusiveOrExpression
                element logicalAndExpression
                  atom logicalAndExpression
                    ruleref logicalAndExpression
                element '&&'
                  atom '&&'
                    terminal '&&'
                element inclusiveOrExpression
                  atom inclusiveOrExpression
                    ruleref inclusiveOrExpression
        exceptionGroup 
    ruleSpec logicalOrExpression:logicalAndExpression|logicalOrExpression'||'logicalAndExpression;
      parserRuleSpec logicalOrExpression:logicalAndExpression|logicalOrExpression'||'logicalAndExpression;
        ruleBlock logicalAndExpression|logicalOrExpression'||'logicalAndExpression
          ruleAltList logicalAndExpression|logicalOrExpression'||'logicalAndExpression
            labeledAlt logicalAndExpression
              alternative logicalAndExpression
                element logicalAndExpression
                  atom logicalAndExpression
                    ruleref logicalAndExpression
            labeledAlt logicalOrExpression'||'logicalAndExpression
              alternative logicalOrExpression'||'logicalAndExpression
                element logicalOrExpression
                  atom logicalOrExpression
                    ruleref logicalOrExpression
                element '||'
                  atom '||'
                    terminal '||'
                element logicalAndExpression
                  atom logicalAndExpression
                    ruleref logicalAndExpression
        exceptionGroup 
    ruleSpec conditionalExpression:logicalOrExpression('?'expression':'conditionalExpression)?;
      parserRuleSpec conditionalExpression:logicalOrExpression('?'expression':'conditionalExpression)?;
        ruleBlock logicalOrExpression('?'expression':'conditionalExpression)?
          ruleAltList logicalOrExpression('?'expression':'conditionalExpression)?
            labeledAlt logicalOrExpression('?'expression':'conditionalExpression)?
              alternative logicalOrExpression('?'expression':'conditionalExpression)?
                element logicalOrExpression
                  atom logicalOrExpression
                    ruleref logicalOrExpression
                element ('?'expression':'conditionalExpression)?
                  ebnf ('?'expression':'conditionalExpression)?
                    block ('?'expression':'conditionalExpression)
                      altList '?'expression':'conditionalExpression
                        alternative '?'expression':'conditionalExpression
                          element '?'
                            atom '?'
                              terminal '?'
                          element expression
                            atom expression
                              ruleref expression
                          element ':'
                            atom ':'
                              terminal ':'
                          element conditionalExpression
                            atom conditionalExpression
                              ruleref conditionalExpression
                    blockSuffix ?
                      ebnfSuffix ?
        exceptionGroup 
    ruleSpec assignmentExpression:conditionalExpression|unaryExpressionassignmentOperatorassignmentExpression|DigitSequence;
      parserRuleSpec assignmentExpression:conditionalExpression|unaryExpressionassignmentOperatorassignmentExpression|DigitSequence;
        ruleBlock conditionalExpression|unaryExpressionassignmentOperatorassignmentExpression|DigitSequence
          ruleAltList conditionalExpression|unaryExpressionassignmentOperatorassignmentExpression|DigitSequence
            labeledAlt conditionalExpression
              alternative conditionalExpression
                element conditionalExpression
                  atom conditionalExpression
                    ruleref conditionalExpression
            labeledAlt unaryExpressionassignmentOperatorassignmentExpression
              alternative unaryExpressionassignmentOperatorassignmentExpression
                element unaryExpression
                  atom unaryExpression
                    ruleref unaryExpression
                element assignmentOperator
                  atom assignmentOperator
                    ruleref assignmentOperator
                element assignmentExpression
                  atom assignmentExpression
                    ruleref assignmentExpression
            labeledAlt DigitSequence
              alternative DigitSequence
                element DigitSequence
                  atom DigitSequence
                    terminal DigitSequence
        exceptionGroup 
    ruleSpec assignmentOperator:'='|'*='|'/='|'%='|'+='|'-='|'<<='|'>>='|'&='|'^='|'|=';
      parserRuleSpec assignmentOperator:'='|'*='|'/='|'%='|'+='|'-='|'<<='|'>>='|'&='|'^='|'|=';
        ruleBlock '='|'*='|'/='|'%='|'+='|'-='|'<<='|'>>='|'&='|'^='|'|='
          ruleAltList '='|'*='|'/='|'%='|'+='|'-='|'<<='|'>>='|'&='|'^='|'|='
            labeledAlt '='
              alternative '='
                element '='
                  atom '='
                    terminal '='
            labeledAlt '*='
              alternative '*='
                element '*='
                  atom '*='
                    terminal '*='
            labeledAlt '/='
              alternative '/='
                element '/='
                  atom '/='
                    terminal '/='
            labeledAlt '%='
              alternative '%='
                element '%='
                  atom '%='
                    terminal '%='
            labeledAlt '+='
              alternative '+='
                element '+='
                  atom '+='
                    terminal '+='
            labeledAlt '-='
              alternative '-='
                element '-='
                  atom '-='
                    terminal '-='
            labeledAlt '<<='
              alternative '<<='
                element '<<='
                  atom '<<='
                    terminal '<<='
            labeledAlt '>>='
              alternative '>>='
                element '>>='
                  atom '>>='
                    terminal '>>='
            labeledAlt '&='
              alternative '&='
                element '&='
                  atom '&='
                    terminal '&='
            labeledAlt '^='
              alternative '^='
                element '^='
                  atom '^='
                    terminal '^='
            labeledAlt '|='
              alternative '|='
                element '|='
                  atom '|='
                    terminal '|='
        exceptionGroup 
    ruleSpec expression:assignmentExpression|expression','assignmentExpression;
      parserRuleSpec expression:assignmentExpression|expression','assignmentExpression;
        ruleBlock assignmentExpression|expression','assignmentExpression
          ruleAltList assignmentExpression|expression','assignmentExpression
            labeledAlt assignmentExpression
              alternative assignmentExpression
                element assignmentExpression
                  atom assignmentExpression
                    ruleref assignmentExpression
            labeledAlt expression','assignmentExpression
              alternative expression','assignmentExpression
                element expression
                  atom expression
                    ruleref expression
                element ','
                  atom ','
                    terminal ','
                element assignmentExpression
                  atom assignmentExpression
                    ruleref assignmentExpression
        exceptionGroup 
    ruleSpec constantExpression:conditionalExpression;
      parserRuleSpec constantExpression:conditionalExpression;
        ruleBlock conditionalExpression
          ruleAltList conditionalExpression
            labeledAlt conditionalExpression
              alternative conditionalExpression
                element conditionalExpression
                  atom conditionalExpression
                    ruleref conditionalExpression
        exceptionGroup 
    ruleSpec declaration:declarationSpecifiersinitDeclaratorList';'|declarationSpecifiers';'|staticAssertDeclaration;
      parserRuleSpec declaration:declarationSpecifiersinitDeclaratorList';'|declarationSpecifiers';'|staticAssertDeclaration;
        ruleBlock declarationSpecifiersinitDeclaratorList';'|declarationSpecifiers';'|staticAssertDeclaration
          ruleAltList declarationSpecifiersinitDeclaratorList';'|declarationSpecifiers';'|staticAssertDeclaration
            labeledAlt declarationSpecifiersinitDeclaratorList';'
              alternative declarationSpecifiersinitDeclaratorList';'
                element declarationSpecifiers
                  atom declarationSpecifiers
                    ruleref declarationSpecifiers
                element initDeclaratorList
                  atom initDeclaratorList
                    ruleref initDeclaratorList
                element ';'
                  atom ';'
                    terminal ';'
            labeledAlt declarationSpecifiers';'
              alternative declarationSpecifiers';'
                element declarationSpecifiers
                  atom declarationSpecifiers
                    ruleref declarationSpecifiers
                element ';'
                  atom ';'
                    terminal ';'
            labeledAlt staticAssertDeclaration
              alternative staticAssertDeclaration
                element staticAssertDeclaration
                  atom staticAssertDeclaration
                    ruleref staticAssertDeclaration
        exceptionGroup 
    ruleSpec declarationSpecifiers:declarationSpecifier+;
      parserRuleSpec declarationSpecifiers:declarationSpecifier+;
        ruleBlock declarationSpecifier+
          ruleAltList declarationSpecifier+
            labeledAlt declarationSpecifier+
              alternative declarationSpecifier+
                element declarationSpecifier+
                  atom declarationSpecifier
                    ruleref declarationSpecifier
                  ebnfSuffix +
        exceptionGroup 
    ruleSpec declarationSpecifiers2:declarationSpecifier+;
      parserRuleSpec declarationSpecifiers2:declarationSpecifier+;
        ruleBlock declarationSpecifier+
          ruleAltList declarationSpecifier+
            labeledAlt declarationSpecifier+
              alternative declarationSpecifier+
                element declarationSpecifier+
                  atom declarationSpecifier
                    ruleref declarationSpecifier
                  ebnfSuffix +
        exceptionGroup 
    ruleSpec declarationSpecifier:storageClassSpecifier|typeSpecifier|typeQualifier|functionSpecifier|alignmentSpecifier;
      parserRuleSpec declarationSpecifier:storageClassSpecifier|typeSpecifier|typeQualifier|functionSpecifier|alignmentSpecifier;
        ruleBlock storageClassSpecifier|typeSpecifier|typeQualifier|functionSpecifier|alignmentSpecifier
          ruleAltList storageClassSpecifier|typeSpecifier|typeQualifier|functionSpecifier|alignmentSpecifier
            labeledAlt storageClassSpecifier
              alternative storageClassSpecifier
                element storageClassSpecifier
                  atom storageClassSpecifier
                    ruleref storageClassSpecifier
            labeledAlt typeSpecifier
              alternative typeSpecifier
                element typeSpecifier
                  atom typeSpecifier
                    ruleref typeSpecifier
            labeledAlt typeQualifier
              alternative typeQualifier
                element typeQualifier
                  atom typeQualifier
                    ruleref typeQualifier
            labeledAlt functionSpecifier
              alternative functionSpecifier
                element functionSpecifier
                  atom functionSpecifier
                    ruleref functionSpecifier
            labeledAlt alignmentSpecifier
              alternative alignmentSpecifier
                element alignmentSpecifier
                  atom alignmentSpecifier
                    ruleref alignmentSpecifier
        exceptionGroup 
    ruleSpec initDeclaratorList:initDeclarator|initDeclaratorList','initDeclarator;
      parserRuleSpec initDeclaratorList:initDeclarator|initDeclaratorList','initDeclarator;
        ruleBlock initDeclarator|initDeclaratorList','initDeclarator
          ruleAltList initDeclarator|initDeclaratorList','initDeclarator
            labeledAlt initDeclarator
              alternative initDeclarator
                element initDeclarator
                  atom initDeclarator
                    ruleref initDeclarator
            labeledAlt initDeclaratorList','initDeclarator
              alternative initDeclaratorList','initDeclarator
                element initDeclaratorList
                  atom initDeclaratorList
                    ruleref initDeclaratorList
                element ','
                  atom ','
                    terminal ','
                element initDeclarator
                  atom initDeclarator
                    ruleref initDeclarator
        exceptionGroup 
    ruleSpec initDeclarator:declarator|declarator'='initializer;
      parserRuleSpec initDeclarator:declarator|declarator'='initializer;
        ruleBlock declarator|declarator'='initializer
          ruleAltList declarator|declarator'='initializer
            labeledAlt declarator
              alternative declarator
                element declarator
                  atom declarator
                    ruleref declarator
            labeledAlt declarator'='initializer
              alternative declarator'='initializer
                element declarator
                  atom declarator
                    ruleref declarator
                element '='
                  atom '='
                    terminal '='
                element initializer
                  atom initializer
                    ruleref initializer
        exceptionGroup 
    ruleSpec storageClassSpecifier:'typedef'|'extern'|'static'|'_Thread_local'|'auto'|'register';
      parserRuleSpec storageClassSpecifier:'typedef'|'extern'|'static'|'_Thread_local'|'auto'|'register';
        ruleBlock 'typedef'|'extern'|'static'|'_Thread_local'|'auto'|'register'
          ruleAltList 'typedef'|'extern'|'static'|'_Thread_local'|'auto'|'register'
            labeledAlt 'typedef'
              alternative 'typedef'
                element 'typedef'
                  atom 'typedef'
                    terminal 'typedef'
            labeledAlt 'extern'
              alternative 'extern'
                element 'extern'
                  atom 'extern'
                    terminal 'extern'
            labeledAlt 'static'
              alternative 'static'
                element 'static'
                  atom 'static'
                    terminal 'static'
            labeledAlt '_Thread_local'
              alternative '_Thread_local'
                element '_Thread_local'
                  atom '_Thread_local'
                    terminal '_Thread_local'
            labeledAlt 'auto'
              alternative 'auto'
                element 'auto'
                  atom 'auto'
                    terminal 'auto'
            labeledAlt 'register'
              alternative 'register'
                element 'register'
                  atom 'register'
                    terminal 'register'
        exceptionGroup 
    ruleSpec typeSpecifier:('void'|'char'|'short'|'int'|'long'|'float'|'double'|'signed'|'unsigned'|'_Bool'|'_Complex'|'__m128'|'__m128d'|'__m128i')|'__extension__''('('__m128'|'__m128d'|'__m128i')')'|atomicTypeSpecifier|structOrUnionSpecifier|enumSpecifier|typedefName|'__typeof__''('constantExpression')';
      parserRuleSpec typeSpecifier:('void'|'char'|'short'|'int'|'long'|'float'|'double'|'signed'|'unsigned'|'_Bool'|'_Complex'|'__m128'|'__m128d'|'__m128i')|'__extension__''('('__m128'|'__m128d'|'__m128i')')'|atomicTypeSpecifier|structOrUnionSpecifier|enumSpecifier|typedefName|'__typeof__''('constantExpression')';
        ruleBlock ('void'|'char'|'short'|'int'|'long'|'float'|'double'|'signed'|'unsigned'|'_Bool'|'_Complex'|'__m128'|'__m128d'|'__m128i')|'__extension__''('('__m128'|'__m128d'|'__m128i')')'|atomicTypeSpecifier|structOrUnionSpecifier|enumSpecifier|typedefName|'__typeof__''('constantExpression')'
          ruleAltList ('void'|'char'|'short'|'int'|'long'|'float'|'double'|'signed'|'unsigned'|'_Bool'|'_Complex'|'__m128'|'__m128d'|'__m128i')|'__extension__''('('__m128'|'__m128d'|'__m128i')')'|atomicTypeSpecifier|structOrUnionSpecifier|enumSpecifier|typedefName|'__typeof__''('constantExpression')'
            labeledAlt ('void'|'char'|'short'|'int'|'long'|'float'|'double'|'signed'|'unsigned'|'_Bool'|'_Complex'|'__m128'|'__m128d'|'__m128i')
              alternative ('void'|'char'|'short'|'int'|'long'|'float'|'double'|'signed'|'unsigned'|'_Bool'|'_Complex'|'__m128'|'__m128d'|'__m128i')
                element ('void'|'char'|'short'|'int'|'long'|'float'|'double'|'signed'|'unsigned'|'_Bool'|'_Complex'|'__m128'|'__m128d'|'__m128i')
                  ebnf ('void'|'char'|'short'|'int'|'long'|'float'|'double'|'signed'|'unsigned'|'_Bool'|'_Complex'|'__m128'|'__m128d'|'__m128i')
                    block ('void'|'char'|'short'|'int'|'long'|'float'|'double'|'signed'|'unsigned'|'_Bool'|'_Complex'|'__m128'|'__m128d'|'__m128i')
                      altList 'void'|'char'|'short'|'int'|'long'|'float'|'double'|'signed'|'unsigned'|'_Bool'|'_Complex'|'__m128'|'__m128d'|'__m128i'
                        alternative 'void'
                          element 'void'
                            atom 'void'
                              terminal 'void'
                        alternative 'char'
                          element 'char'
                            atom 'char'
                              terminal 'char'
                        alternative 'short'
                          element 'short'
                            atom 'short'
                              terminal 'short'
                        alternative 'int'
                          element 'int'
                            atom 'int'
                              terminal 'int'
                        alternative 'long'
                          element 'long'
                            atom 'long'
                              terminal 'long'
                        alternative 'float'
                          element 'float'
                            atom 'float'
                              terminal 'float'
                        alternative 'double'
                          element 'double'
                            atom 'double'
                              terminal 'double'
                        alternative 'signed'
                          element 'signed'
                            atom 'signed'
                              terminal 'signed'
                        alternative 'unsigned'
                          element 'unsigned'
                            atom 'unsigned'
                              terminal 'unsigned'
                        alternative '_Bool'
                          element '_Bool'
                            atom '_Bool'
                              terminal '_Bool'
                        alternative '_Complex'
                          element '_Complex'
                            atom '_Complex'
                              terminal '_Complex'
                        alternative '__m128'
                          element '__m128'
                            atom '__m128'
                              terminal '__m128'
                        alternative '__m128d'
                          element '__m128d'
                            atom '__m128d'
                              terminal '__m128d'
                        alternative '__m128i'
                          element '__m128i'
                            atom '__m128i'
                              terminal '__m128i'
            labeledAlt '__extension__''('('__m128'|'__m128d'|'__m128i')')'
              alternative '__extension__''('('__m128'|'__m128d'|'__m128i')')'
                element '__extension__'
                  atom '__extension__'
                    terminal '__extension__'
                element '('
                  atom '('
                    terminal '('
                element ('__m128'|'__m128d'|'__m128i')
                  ebnf ('__m128'|'__m128d'|'__m128i')
                    block ('__m128'|'__m128d'|'__m128i')
                      altList '__m128'|'__m128d'|'__m128i'
                        alternative '__m128'
                          element '__m128'
                            atom '__m128'
                              terminal '__m128'
                        alternative '__m128d'
                          element '__m128d'
                            atom '__m128d'
                              terminal '__m128d'
                        alternative '__m128i'
                          element '__m128i'
                            atom '__m128i'
                              terminal '__m128i'
                element ')'
                  atom ')'
                    terminal ')'
            labeledAlt atomicTypeSpecifier
              alternative atomicTypeSpecifier
                element atomicTypeSpecifier
                  atom atomicTypeSpecifier
                    ruleref atomicTypeSpecifier
            labeledAlt structOrUnionSpecifier
              alternative structOrUnionSpecifier
                element structOrUnionSpecifier
                  atom structOrUnionSpecifier
                    ruleref structOrUnionSpecifier
            labeledAlt enumSpecifier
              alternative enumSpecifier
                element enumSpecifier
                  atom enumSpecifier
                    ruleref enumSpecifier
            labeledAlt typedefName
              alternative typedefName
                element typedefName
                  atom typedefName
                    ruleref typedefName
            labeledAlt '__typeof__''('constantExpression')'
              alternative '__typeof__''('constantExpression')'
                element '__typeof__'
                  atom '__typeof__'
                    terminal '__typeof__'
                element '('
                  atom '('
                    terminal '('
                element constantExpression
                  atom constantExpression
                    ruleref constantExpression
                element ')'
                  atom ')'
                    terminal ')'
        exceptionGroup 
    ruleSpec structOrUnionSpecifier:structOrUnionIdentifier?'{'structDeclarationList'}'|structOrUnionIdentifier;
      parserRuleSpec structOrUnionSpecifier:structOrUnionIdentifier?'{'structDeclarationList'}'|structOrUnionIdentifier;
        ruleBlock structOrUnionIdentifier?'{'structDeclarationList'}'|structOrUnionIdentifier
          ruleAltList structOrUnionIdentifier?'{'structDeclarationList'}'|structOrUnionIdentifier
            labeledAlt structOrUnionIdentifier?'{'structDeclarationList'}'
              alternative structOrUnionIdentifier?'{'structDeclarationList'}'
                element structOrUnion
                  atom structOrUnion
                    ruleref structOrUnion
                element Identifier?
                  atom Identifier
                    terminal Identifier
                  ebnfSuffix ?
                element '{'
                  atom '{'
                    terminal '{'
                element structDeclarationList
                  atom structDeclarationList
                    ruleref structDeclarationList
                element '}'
                  atom '}'
                    terminal '}'
            labeledAlt structOrUnionIdentifier
              alternative structOrUnionIdentifier
                element structOrUnion
                  atom structOrUnion
                    ruleref structOrUnion
                element Identifier
                  atom Identifier
                    terminal Identifier
        exceptionGroup 
    ruleSpec structOrUnion:'struct'|'union';
      parserRuleSpec structOrUnion:'struct'|'union';
        ruleBlock 'struct'|'union'
          ruleAltList 'struct'|'union'
            labeledAlt 'struct'
              alternative 'struct'
                element 'struct'
                  atom 'struct'
                    terminal 'struct'
            labeledAlt 'union'
              alternative 'union'
                element 'union'
                  atom 'union'
                    terminal 'union'
        exceptionGroup 
    ruleSpec structDeclarationList:structDeclaration|structDeclarationListstructDeclaration;
      parserRuleSpec structDeclarationList:structDeclaration|structDeclarationListstructDeclaration;
        ruleBlock structDeclaration|structDeclarationListstructDeclaration
          ruleAltList structDeclaration|structDeclarationListstructDeclaration
            labeledAlt structDeclaration
              alternative structDeclaration
                element structDeclaration
                  atom structDeclaration
                    ruleref structDeclaration
            labeledAlt structDeclarationListstructDeclaration
              alternative structDeclarationListstructDeclaration
                element structDeclarationList
                  atom structDeclarationList
                    ruleref structDeclarationList
                element structDeclaration
                  atom structDeclaration
                    ruleref structDeclaration
        exceptionGroup 
    ruleSpec structDeclaration:specifierQualifierListstructDeclaratorList?';'|staticAssertDeclaration;
      parserRuleSpec structDeclaration:specifierQualifierListstructDeclaratorList?';'|staticAssertDeclaration;
        ruleBlock specifierQualifierListstructDeclaratorList?';'|staticAssertDeclaration
          ruleAltList specifierQualifierListstructDeclaratorList?';'|staticAssertDeclaration
            labeledAlt specifierQualifierListstructDeclaratorList?';'
              alternative specifierQualifierListstructDeclaratorList?';'
                element specifierQualifierList
                  atom specifierQualifierList
                    ruleref specifierQualifierList
                element structDeclaratorList?
                  atom structDeclaratorList
                    ruleref structDeclaratorList
                  ebnfSuffix ?
                element ';'
                  atom ';'
                    terminal ';'
            labeledAlt staticAssertDeclaration
              alternative staticAssertDeclaration
                element staticAssertDeclaration
                  atom staticAssertDeclaration
                    ruleref staticAssertDeclaration
        exceptionGroup 
    ruleSpec specifierQualifierList:typeSpecifierspecifierQualifierList?|typeQualifierspecifierQualifierList?;
      parserRuleSpec specifierQualifierList:typeSpecifierspecifierQualifierList?|typeQualifierspecifierQualifierList?;
        ruleBlock typeSpecifierspecifierQualifierList?|typeQualifierspecifierQualifierList?
          ruleAltList typeSpecifierspecifierQualifierList?|typeQualifierspecifierQualifierList?
            labeledAlt typeSpecifierspecifierQualifierList?
              alternative typeSpecifierspecifierQualifierList?
                element typeSpecifier
                  atom typeSpecifier
                    ruleref typeSpecifier
                element specifierQualifierList?
                  atom specifierQualifierList
                    ruleref specifierQualifierList
                  ebnfSuffix ?
            labeledAlt typeQualifierspecifierQualifierList?
              alternative typeQualifierspecifierQualifierList?
                element typeQualifier
                  atom typeQualifier
                    ruleref typeQualifier
                element specifierQualifierList?
                  atom specifierQualifierList
                    ruleref specifierQualifierList
                  ebnfSuffix ?
        exceptionGroup 
    ruleSpec structDeclaratorList:structDeclarator|structDeclaratorList','structDeclarator;
      parserRuleSpec structDeclaratorList:structDeclarator|structDeclaratorList','structDeclarator;
        ruleBlock structDeclarator|structDeclaratorList','structDeclarator
          ruleAltList structDeclarator|structDeclaratorList','structDeclarator
            labeledAlt structDeclarator
              alternative structDeclarator
                element structDeclarator
                  atom structDeclarator
                    ruleref structDeclarator
            labeledAlt structDeclaratorList','structDeclarator
              alternative structDeclaratorList','structDeclarator
                element structDeclaratorList
                  atom structDeclaratorList
                    ruleref structDeclaratorList
                element ','
                  atom ','
                    terminal ','
                element structDeclarator
                  atom structDeclarator
                    ruleref structDeclarator
        exceptionGroup 
    ruleSpec structDeclarator:declarator|declarator?':'constantExpression;
      parserRuleSpec structDeclarator:declarator|declarator?':'constantExpression;
        ruleBlock declarator|declarator?':'constantExpression
          ruleAltList declarator|declarator?':'constantExpression
            labeledAlt declarator
              alternative declarator
                element declarator
                  atom declarator
                    ruleref declarator
            labeledAlt declarator?':'constantExpression
              alternative declarator?':'constantExpression
                element declarator?
                  atom declarator
                    ruleref declarator
                  ebnfSuffix ?
                element ':'
                  atom ':'
                    terminal ':'
                element constantExpression
                  atom constantExpression
                    ruleref constantExpression
        exceptionGroup 
    ruleSpec enumSpecifier:'enum'Identifier?'{'enumeratorList'}'|'enum'Identifier?'{'enumeratorList',''}'|'enum'Identifier;
      parserRuleSpec enumSpecifier:'enum'Identifier?'{'enumeratorList'}'|'enum'Identifier?'{'enumeratorList',''}'|'enum'Identifier;
        ruleBlock 'enum'Identifier?'{'enumeratorList'}'|'enum'Identifier?'{'enumeratorList',''}'|'enum'Identifier
          ruleAltList 'enum'Identifier?'{'enumeratorList'}'|'enum'Identifier?'{'enumeratorList',''}'|'enum'Identifier
            labeledAlt 'enum'Identifier?'{'enumeratorList'}'
              alternative 'enum'Identifier?'{'enumeratorList'}'
                element 'enum'
                  atom 'enum'
                    terminal 'enum'
                element Identifier?
                  atom Identifier
                    terminal Identifier
                  ebnfSuffix ?
                element '{'
                  atom '{'
                    terminal '{'
                element enumeratorList
                  atom enumeratorList
                    ruleref enumeratorList
                element '}'
                  atom '}'
                    terminal '}'
            labeledAlt 'enum'Identifier?'{'enumeratorList',''}'
              alternative 'enum'Identifier?'{'enumeratorList',''}'
                element 'enum'
                  atom 'enum'
                    terminal 'enum'
                element Identifier?
                  atom Identifier
                    terminal Identifier
                  ebnfSuffix ?
                element '{'
                  atom '{'
                    terminal '{'
                element enumeratorList
                  atom enumeratorList
                    ruleref enumeratorList
                element ','
                  atom ','
                    terminal ','
                element '}'
                  atom '}'
                    terminal '}'
            labeledAlt 'enum'Identifier
              alternative 'enum'Identifier
                element 'enum'
                  atom 'enum'
                    terminal 'enum'
                element Identifier
                  atom Identifier
                    terminal Identifier
        exceptionGroup 
    ruleSpec enumeratorList:enumerator|enumeratorList','enumerator;
      parserRuleSpec enumeratorList:enumerator|enumeratorList','enumerator;
        ruleBlock enumerator|enumeratorList','enumerator
          ruleAltList enumerator|enumeratorList','enumerator
            labeledAlt enumerator
              alternative enumerator
                element enumerator
                  atom enumerator
                    ruleref enumerator
            labeledAlt enumeratorList','enumerator
              alternative enumeratorList','enumerator
                element enumeratorList
                  atom enumeratorList
                    ruleref enumeratorList
                element ','
                  atom ','
                    terminal ','
                element enumerator
                  atom enumerator
                    ruleref enumerator
        exceptionGroup 
    ruleSpec enumerator:enumerationConstant|enumerationConstant'='constantExpression;
      parserRuleSpec enumerator:enumerationConstant|enumerationConstant'='constantExpression;
        ruleBlock enumerationConstant|enumerationConstant'='constantExpression
          ruleAltList enumerationConstant|enumerationConstant'='constantExpression
            labeledAlt enumerationConstant
              alternative enumerationConstant
                element enumerationConstant
                  atom enumerationConstant
                    ruleref enumerationConstant
            labeledAlt enumerationConstant'='constantExpression
              alternative enumerationConstant'='constantExpression
                element enumerationConstant
                  atom enumerationConstant
                    ruleref enumerationConstant
                element '='
                  atom '='
                    terminal '='
                element constantExpression
                  atom constantExpression
                    ruleref constantExpression
        exceptionGroup 
    ruleSpec enumerationConstant:Identifier;
      parserRuleSpec enumerationConstant:Identifier;
        ruleBlock Identifier
          ruleAltList Identifier
            labeledAlt Identifier
              alternative Identifier
                element Identifier
                  atom Identifier
                    terminal Identifier
        exceptionGroup 
    ruleSpec atomicTypeSpecifier:'_Atomic''('typeName')';
      parserRuleSpec atomicTypeSpecifier:'_Atomic''('typeName')';
        ruleBlock '_Atomic''('typeName')'
          ruleAltList '_Atomic''('typeName')'
            labeledAlt '_Atomic''('typeName')'
              alternative '_Atomic''('typeName')'
                element '_Atomic'
                  atom '_Atomic'
                    terminal '_Atomic'
                element '('
                  atom '('
                    terminal '('
                element typeName
                  atom typeName
                    ruleref typeName
                element ')'
                  atom ')'
                    terminal ')'
        exceptionGroup 
    ruleSpec typeQualifier:'const'|'restrict'|'volatile'|'_Atomic';
      parserRuleSpec typeQualifier:'const'|'restrict'|'volatile'|'_Atomic';
        ruleBlock 'const'|'restrict'|'volatile'|'_Atomic'
          ruleAltList 'const'|'restrict'|'volatile'|'_Atomic'
            labeledAlt 'const'
              alternative 'const'
                element 'const'
                  atom 'const'
                    terminal 'const'
            labeledAlt 'restrict'
              alternative 'restrict'
                element 'restrict'
                  atom 'restrict'
                    terminal 'restrict'
            labeledAlt 'volatile'
              alternative 'volatile'
                element 'volatile'
                  atom 'volatile'
                    terminal 'volatile'
            labeledAlt '_Atomic'
              alternative '_Atomic'
                element '_Atomic'
                  atom '_Atomic'
                    terminal '_Atomic'
        exceptionGroup 
    ruleSpec functionSpecifier:('inline'|'_Noreturn'|'__inline__'|'__stdcall')|gccAttributeSpecifier|'__declspec''('Identifier')';
      parserRuleSpec functionSpecifier:('inline'|'_Noreturn'|'__inline__'|'__stdcall')|gccAttributeSpecifier|'__declspec''('Identifier')';
        ruleBlock ('inline'|'_Noreturn'|'__inline__'|'__stdcall')|gccAttributeSpecifier|'__declspec''('Identifier')'
          ruleAltList ('inline'|'_Noreturn'|'__inline__'|'__stdcall')|gccAttributeSpecifier|'__declspec''('Identifier')'
            labeledAlt ('inline'|'_Noreturn'|'__inline__'|'__stdcall')
              alternative ('inline'|'_Noreturn'|'__inline__'|'__stdcall')
                element ('inline'|'_Noreturn'|'__inline__'|'__stdcall')
                  ebnf ('inline'|'_Noreturn'|'__inline__'|'__stdcall')
                    block ('inline'|'_Noreturn'|'__inline__'|'__stdcall')
                      altList 'inline'|'_Noreturn'|'__inline__'|'__stdcall'
                        alternative 'inline'
                          element 'inline'
                            atom 'inline'
                              terminal 'inline'
                        alternative '_Noreturn'
                          element '_Noreturn'
                            atom '_Noreturn'
                              terminal '_Noreturn'
                        alternative '__inline__'
                          element '__inline__'
                            atom '__inline__'
                              terminal '__inline__'
                        alternative '__stdcall'
                          element '__stdcall'
                            atom '__stdcall'
                              terminal '__stdcall'
            labeledAlt gccAttributeSpecifier
              alternative gccAttributeSpecifier
                element gccAttributeSpecifier
                  atom gccAttributeSpecifier
                    ruleref gccAttributeSpecifier
            labeledAlt '__declspec''('Identifier')'
              alternative '__declspec''('Identifier')'
                element '__declspec'
                  atom '__declspec'
                    terminal '__declspec'
                element '('
                  atom '('
                    terminal '('
                element Identifier
                  atom Identifier
                    terminal Identifier
                element ')'
                  atom ')'
                    terminal ')'
        exceptionGroup 
    ruleSpec alignmentSpecifier:'_Alignas''('typeName')'|'_Alignas''('constantExpression')';
      parserRuleSpec alignmentSpecifier:'_Alignas''('typeName')'|'_Alignas''('constantExpression')';
        ruleBlock '_Alignas''('typeName')'|'_Alignas''('constantExpression')'
          ruleAltList '_Alignas''('typeName')'|'_Alignas''('constantExpression')'
            labeledAlt '_Alignas''('typeName')'
              alternative '_Alignas''('typeName')'
                element '_Alignas'
                  atom '_Alignas'
                    terminal '_Alignas'
                element '('
                  atom '('
                    terminal '('
                element typeName
                  atom typeName
                    ruleref typeName
                element ')'
                  atom ')'
                    terminal ')'
            labeledAlt '_Alignas''('constantExpression')'
              alternative '_Alignas''('constantExpression')'
                element '_Alignas'
                  atom '_Alignas'
                    terminal '_Alignas'
                element '('
                  atom '('
                    terminal '('
                element constantExpression
                  atom constantExpression
                    ruleref constantExpression
                element ')'
                  atom ')'
                    terminal ')'
        exceptionGroup 
    ruleSpec declarator:pointer?directDeclaratorgccDeclaratorExtension*;
      parserRuleSpec declarator:pointer?directDeclaratorgccDeclaratorExtension*;
        ruleBlock pointer?directDeclaratorgccDeclaratorExtension*
          ruleAltList pointer?directDeclaratorgccDeclaratorExtension*
            labeledAlt pointer?directDeclaratorgccDeclaratorExtension*
              alternative pointer?directDeclaratorgccDeclaratorExtension*
                element pointer?
                  atom pointer
                    ruleref pointer
                  ebnfSuffix ?
                element directDeclarator
                  atom directDeclarator
                    ruleref directDeclarator
                element gccDeclaratorExtension*
                  atom gccDeclaratorExtension
                    ruleref gccDeclaratorExtension
                  ebnfSuffix *
        exceptionGroup 
    ruleSpec directDeclarator:Identifier|'('declarator')'|directDeclarator'['typeQualifierList?assignmentExpression?']'|directDeclarator'[''static'typeQualifierList?assignmentExpression']'|directDeclarator'['typeQualifierList'static'assignmentExpression']'|directDeclarator'['typeQualifierList?'*'']'|directDeclarator'('parameterTypeList')'|directDeclarator'('identifierList?')'|Identifier':'DigitSequence;
      parserRuleSpec directDeclarator:Identifier|'('declarator')'|directDeclarator'['typeQualifierList?assignmentExpression?']'|directDeclarator'[''static'typeQualifierList?assignmentExpression']'|directDeclarator'['typeQualifierList'static'assignmentExpression']'|directDeclarator'['typeQualifierList?'*'']'|directDeclarator'('parameterTypeList')'|directDeclarator'('identifierList?')'|Identifier':'DigitSequence;
        ruleBlock Identifier|'('declarator')'|directDeclarator'['typeQualifierList?assignmentExpression?']'|directDeclarator'[''static'typeQualifierList?assignmentExpression']'|directDeclarator'['typeQualifierList'static'assignmentExpression']'|directDeclarator'['typeQualifierList?'*'']'|directDeclarator'('parameterTypeList')'|directDeclarator'('identifierList?')'|Identifier':'DigitSequence
          ruleAltList Identifier|'('declarator')'|directDeclarator'['typeQualifierList?assignmentExpression?']'|directDeclarator'[''static'typeQualifierList?assignmentExpression']'|directDeclarator'['typeQualifierList'static'assignmentExpression']'|directDeclarator'['typeQualifierList?'*'']'|directDeclarator'('parameterTypeList')'|directDeclarator'('identifierList?')'|Identifier':'DigitSequence
            labeledAlt Identifier
              alternative Identifier
                element Identifier
                  atom Identifier
                    terminal Identifier
            labeledAlt '('declarator')'
              alternative '('declarator')'
                element '('
                  atom '('
                    terminal '('
                element declarator
                  atom declarator
                    ruleref declarator
                element ')'
                  atom ')'
                    terminal ')'
            labeledAlt directDeclarator'['typeQualifierList?assignmentExpression?']'
              alternative directDeclarator'['typeQualifierList?assignmentExpression?']'
                element directDeclarator
                  atom directDeclarator
                    ruleref directDeclarator
                element '['
                  atom '['
                    terminal '['
                element typeQualifierList?
                  atom typeQualifierList
                    ruleref typeQualifierList
                  ebnfSuffix ?
                element assignmentExpression?
                  atom assignmentExpression
                    ruleref assignmentExpression
                  ebnfSuffix ?
                element ']'
                  atom ']'
                    terminal ']'
            labeledAlt directDeclarator'[''static'typeQualifierList?assignmentExpression']'
              alternative directDeclarator'[''static'typeQualifierList?assignmentExpression']'
                element directDeclarator
                  atom directDeclarator
                    ruleref directDeclarator
                element '['
                  atom '['
                    terminal '['
                element 'static'
                  atom 'static'
                    terminal 'static'
                element typeQualifierList?
                  atom typeQualifierList
                    ruleref typeQualifierList
                  ebnfSuffix ?
                element assignmentExpression
                  atom assignmentExpression
                    ruleref assignmentExpression
                element ']'
                  atom ']'
                    terminal ']'
            labeledAlt directDeclarator'['typeQualifierList'static'assignmentExpression']'
              alternative directDeclarator'['typeQualifierList'static'assignmentExpression']'
                element directDeclarator
                  atom directDeclarator
                    ruleref directDeclarator
                element '['
                  atom '['
                    terminal '['
                element typeQualifierList
                  atom typeQualifierList
                    ruleref typeQualifierList
                element 'static'
                  atom 'static'
                    terminal 'static'
                element assignmentExpression
                  atom assignmentExpression
                    ruleref assignmentExpression
                element ']'
                  atom ']'
                    terminal ']'
            labeledAlt directDeclarator'['typeQualifierList?'*'']'
              alternative directDeclarator'['typeQualifierList?'*'']'
                element directDeclarator
                  atom directDeclarator
                    ruleref directDeclarator
                element '['
                  atom '['
                    terminal '['
                element typeQualifierList?
                  atom typeQualifierList
                    ruleref typeQualifierList
                  ebnfSuffix ?
                element '*'
                  atom '*'
                    terminal '*'
                element ']'
                  atom ']'
                    terminal ']'
            labeledAlt directDeclarator'('parameterTypeList')'
              alternative directDeclarator'('parameterTypeList')'
                element directDeclarator
                  atom directDeclarator
                    ruleref directDeclarator
                element '('
                  atom '('
                    terminal '('
                element parameterTypeList
                  atom parameterTypeList
                    ruleref parameterTypeList
                element ')'
                  atom ')'
                    terminal ')'
            labeledAlt directDeclarator'('identifierList?')'
              alternative directDeclarator'('identifierList?')'
                element directDeclarator
                  atom directDeclarator
                    ruleref directDeclarator
                element '('
                  atom '('
                    terminal '('
                element identifierList?
                  atom identifierList
                    ruleref identifierList
                  ebnfSuffix ?
                element ')'
                  atom ')'
                    terminal ')'
            labeledAlt Identifier':'DigitSequence
              alternative Identifier':'DigitSequence
                element Identifier
                  atom Identifier
                    terminal Identifier
                element ':'
                  atom ':'
                    terminal ':'
                element DigitSequence
                  atom DigitSequence
                    terminal DigitSequence
        exceptionGroup 
    ruleSpec gccDeclaratorExtension:'__asm''('StringLiteral+')'|gccAttributeSpecifier;
      parserRuleSpec gccDeclaratorExtension:'__asm''('StringLiteral+')'|gccAttributeSpecifier;
        ruleBlock '__asm''('StringLiteral+')'|gccAttributeSpecifier
          ruleAltList '__asm''('StringLiteral+')'|gccAttributeSpecifier
            labeledAlt '__asm''('StringLiteral+')'
              alternative '__asm''('StringLiteral+')'
                element '__asm'
                  atom '__asm'
                    terminal '__asm'
                element '('
                  atom '('
                    terminal '('
                element StringLiteral+
                  atom StringLiteral
                    terminal StringLiteral
                  ebnfSuffix +
                element ')'
                  atom ')'
                    terminal ')'
            labeledAlt gccAttributeSpecifier
              alternative gccAttributeSpecifier
                element gccAttributeSpecifier
                  atom gccAttributeSpecifier
                    ruleref gccAttributeSpecifier
        exceptionGroup 
    ruleSpec gccAttributeSpecifier:'__attribute__''(''('gccAttributeList')'')';
      parserRuleSpec gccAttributeSpecifier:'__attribute__''(''('gccAttributeList')'')';
        ruleBlock '__attribute__''(''('gccAttributeList')'')'
          ruleAltList '__attribute__''(''('gccAttributeList')'')'
            labeledAlt '__attribute__''(''('gccAttributeList')'')'
              alternative '__attribute__''(''('gccAttributeList')'')'
                element '__attribute__'
                  atom '__attribute__'
                    terminal '__attribute__'
                element '('
                  atom '('
                    terminal '('
                element '('
                  atom '('
                    terminal '('
                element gccAttributeList
                  atom gccAttributeList
                    ruleref gccAttributeList
                element ')'
                  atom ')'
                    terminal ')'
                element ')'
                  atom ')'
                    terminal ')'
        exceptionGroup 
    ruleSpec gccAttributeList:gccAttribute(','gccAttribute)*|;
      parserRuleSpec gccAttributeList:gccAttribute(','gccAttribute)*|;
        ruleBlock gccAttribute(','gccAttribute)*|
          ruleAltList gccAttribute(','gccAttribute)*|
            labeledAlt gccAttribute(','gccAttribute)*
              alternative gccAttribute(','gccAttribute)*
                element gccAttribute
                  atom gccAttribute
                    ruleref gccAttribute
                element (','gccAttribute)*
                  ebnf (','gccAttribute)*
                    block (','gccAttribute)
                      altList ','gccAttribute
                        alternative ','gccAttribute
                          element ','
                            atom ','
                              terminal ','
                          element gccAttribute
                            atom gccAttribute
                              ruleref gccAttribute
                    blockSuffix *
                      ebnfSuffix *
            labeledAlt 
              alternative 
        exceptionGroup 
    ruleSpec gccAttribute:~(','|'('|')')('('argumentExpressionList?')')?|;
      parserRuleSpec gccAttribute:~(','|'('|')')('('argumentExpressionList?')')?|;
        ruleBlock ~(','|'('|')')('('argumentExpressionList?')')?|
          ruleAltList ~(','|'('|')')('('argumentExpressionList?')')?|
            labeledAlt ~(','|'('|')')('('argumentExpressionList?')')?
              alternative ~(','|'('|')')('('argumentExpressionList?')')?
                element ~(','|'('|')')
                  atom ~(','|'('|')')
                    notSet ~(','|'('|')')
                      blockSet (','|'('|')')
                        setElement ','
                        setElement '('
                        setElement ')'
                element ('('argumentExpressionList?')')?
                  ebnf ('('argumentExpressionList?')')?
                    block ('('argumentExpressionList?')')
                      altList '('argumentExpressionList?')'
                        alternative '('argumentExpressionList?')'
                          element '('
                            atom '('
                              terminal '('
                          element argumentExpressionList?
                            atom argumentExpressionList
                              ruleref argumentExpressionList
                            ebnfSuffix ?
                          element ')'
                            atom ')'
                              terminal ')'
                    blockSuffix ?
                      ebnfSuffix ?
            labeledAlt 
              alternative 
        exceptionGroup 
    ruleSpec nestedParenthesesBlock:(~('('|')')|'('nestedParenthesesBlock')')*;
      parserRuleSpec nestedParenthesesBlock:(~('('|')')|'('nestedParenthesesBlock')')*;
        ruleBlock (~('('|')')|'('nestedParenthesesBlock')')*
          ruleAltList (~('('|')')|'('nestedParenthesesBlock')')*
            labeledAlt (~('('|')')|'('nestedParenthesesBlock')')*
              alternative (~('('|')')|'('nestedParenthesesBlock')')*
                element (~('('|')')|'('nestedParenthesesBlock')')*
                  ebnf (~('('|')')|'('nestedParenthesesBlock')')*
                    block (~('('|')')|'('nestedParenthesesBlock')')
                      altList ~('('|')')|'('nestedParenthesesBlock')'
                        alternative ~('('|')')
                          element ~('('|')')
                            atom ~('('|')')
                              notSet ~('('|')')
                                blockSet ('('|')')
                                  setElement '('
                                  setElement ')'
                        alternative '('nestedParenthesesBlock')'
                          element '('
                            atom '('
                              terminal '('
                          element nestedParenthesesBlock
                            atom nestedParenthesesBlock
                              ruleref nestedParenthesesBlock
                          element ')'
                            atom ')'
                              terminal ')'
                    blockSuffix *
                      ebnfSuffix *
        exceptionGroup 
    ruleSpec pointer:'*'typeQualifierList?|'*'typeQualifierList?pointer|'^'typeQualifierList?|'^'typeQualifierList?pointer;
      parserRuleSpec pointer:'*'typeQualifierList?|'*'typeQualifierList?pointer|'^'typeQualifierList?|'^'typeQualifierList?pointer;
        ruleBlock '*'typeQualifierList?|'*'typeQualifierList?pointer|'^'typeQualifierList?|'^'typeQualifierList?pointer
          ruleAltList '*'typeQualifierList?|'*'typeQualifierList?pointer|'^'typeQualifierList?|'^'typeQualifierList?pointer
            labeledAlt '*'typeQualifierList?
              alternative '*'typeQualifierList?
                element '*'
                  atom '*'
                    terminal '*'
                element typeQualifierList?
                  atom typeQualifierList
                    ruleref typeQualifierList
                  ebnfSuffix ?
            labeledAlt '*'typeQualifierList?pointer
              alternative '*'typeQualifierList?pointer
                element '*'
                  atom '*'
                    terminal '*'
                element typeQualifierList?
                  atom typeQualifierList
                    ruleref typeQualifierList
                  ebnfSuffix ?
                element pointer
                  atom pointer
                    ruleref pointer
            labeledAlt '^'typeQualifierList?
              alternative '^'typeQualifierList?
                element '^'
                  atom '^'
                    terminal '^'
                element typeQualifierList?
                  atom typeQualifierList
                    ruleref typeQualifierList
                  ebnfSuffix ?
            labeledAlt '^'typeQualifierList?pointer
              alternative '^'typeQualifierList?pointer
                element '^'
                  atom '^'
                    terminal '^'
                element typeQualifierList?
                  atom typeQualifierList
                    ruleref typeQualifierList
                  ebnfSuffix ?
                element pointer
                  atom pointer
                    ruleref pointer
        exceptionGroup 
    ruleSpec typeQualifierList:typeQualifier|typeQualifierListtypeQualifier;
      parserRuleSpec typeQualifierList:typeQualifier|typeQualifierListtypeQualifier;
        ruleBlock typeQualifier|typeQualifierListtypeQualifier
          ruleAltList typeQualifier|typeQualifierListtypeQualifier
            labeledAlt typeQualifier
              alternative typeQualifier
                element typeQualifier
                  atom typeQualifier
                    ruleref typeQualifier
            labeledAlt typeQualifierListtypeQualifier
              alternative typeQualifierListtypeQualifier
                element typeQualifierList
                  atom typeQualifierList
                    ruleref typeQualifierList
                element typeQualifier
                  atom typeQualifier
                    ruleref typeQualifier
        exceptionGroup 
    ruleSpec parameterTypeList:parameterList|parameterList',''...';
      parserRuleSpec parameterTypeList:parameterList|parameterList',''...';
        ruleBlock parameterList|parameterList',''...'
          ruleAltList parameterList|parameterList',''...'
            labeledAlt parameterList
              alternative parameterList
                element parameterList
                  atom parameterList
                    ruleref parameterList
            labeledAlt parameterList',''...'
              alternative parameterList',''...'
                element parameterList
                  atom parameterList
                    ruleref parameterList
                element ','
                  atom ','
                    terminal ','
                element '...'
                  atom '...'
                    terminal '...'
        exceptionGroup 
    ruleSpec parameterList:parameterDeclaration|parameterList','parameterDeclaration;
      parserRuleSpec parameterList:parameterDeclaration|parameterList','parameterDeclaration;
        ruleBlock parameterDeclaration|parameterList','parameterDeclaration
          ruleAltList parameterDeclaration|parameterList','parameterDeclaration
            labeledAlt parameterDeclaration
              alternative parameterDeclaration
                element parameterDeclaration
                  atom parameterDeclaration
                    ruleref parameterDeclaration
            labeledAlt parameterList','parameterDeclaration
              alternative parameterList','parameterDeclaration
                element parameterList
                  atom parameterList
                    ruleref parameterList
                element ','
                  atom ','
                    terminal ','
                element parameterDeclaration
                  atom parameterDeclaration
                    ruleref parameterDeclaration
        exceptionGroup 
    ruleSpec parameterDeclaration:declarationSpecifiersdeclarator|declarationSpecifiers2abstractDeclarator?;
      parserRuleSpec parameterDeclaration:declarationSpecifiersdeclarator|declarationSpecifiers2abstractDeclarator?;
        ruleBlock declarationSpecifiersdeclarator|declarationSpecifiers2abstractDeclarator?
          ruleAltList declarationSpecifiersdeclarator|declarationSpecifiers2abstractDeclarator?
            labeledAlt declarationSpecifiersdeclarator
              alternative declarationSpecifiersdeclarator
                element declarationSpecifiers
                  atom declarationSpecifiers
                    ruleref declarationSpecifiers
                element declarator
                  atom declarator
                    ruleref declarator
            labeledAlt declarationSpecifiers2abstractDeclarator?
              alternative declarationSpecifiers2abstractDeclarator?
                element declarationSpecifiers2
                  atom declarationSpecifiers2
                    ruleref declarationSpecifiers2
                element abstractDeclarator?
                  atom abstractDeclarator
                    ruleref abstractDeclarator
                  ebnfSuffix ?
        exceptionGroup 
    ruleSpec identifierList:Identifier|identifierList','Identifier;
      parserRuleSpec identifierList:Identifier|identifierList','Identifier;
        ruleBlock Identifier|identifierList','Identifier
          ruleAltList Identifier|identifierList','Identifier
            labeledAlt Identifier
              alternative Identifier
                element Identifier
                  atom Identifier
                    terminal Identifier
            labeledAlt identifierList','Identifier
              alternative identifierList','Identifier
                element identifierList
                  atom identifierList
                    ruleref identifierList
                element ','
                  atom ','
                    terminal ','
                element Identifier
                  atom Identifier
                    terminal Identifier
        exceptionGroup 
    ruleSpec typeName:specifierQualifierListabstractDeclarator?;
      parserRuleSpec typeName:specifierQualifierListabstractDeclarator?;
        ruleBlock specifierQualifierListabstractDeclarator?
          ruleAltList specifierQualifierListabstractDeclarator?
            labeledAlt specifierQualifierListabstractDeclarator?
              alternative specifierQualifierListabstractDeclarator?
                element specifierQualifierList
                  atom specifierQualifierList
                    ruleref specifierQualifierList
                element abstractDeclarator?
                  atom abstractDeclarator
                    ruleref abstractDeclarator
                  ebnfSuffix ?
        exceptionGroup 
    ruleSpec abstractDeclarator:pointer|pointer?directAbstractDeclaratorgccDeclaratorExtension*;
      parserRuleSpec abstractDeclarator:pointer|pointer?directAbstractDeclaratorgccDeclaratorExtension*;
        ruleBlock pointer|pointer?directAbstractDeclaratorgccDeclaratorExtension*
          ruleAltList pointer|pointer?directAbstractDeclaratorgccDeclaratorExtension*
            labeledAlt pointer
              alternative pointer
                element pointer
                  atom pointer
                    ruleref pointer
            labeledAlt pointer?directAbstractDeclaratorgccDeclaratorExtension*
              alternative pointer?directAbstractDeclaratorgccDeclaratorExtension*
                element pointer?
                  atom pointer
                    ruleref pointer
                  ebnfSuffix ?
                element directAbstractDeclarator
                  atom directAbstractDeclarator
                    ruleref directAbstractDeclarator
                element gccDeclaratorExtension*
                  atom gccDeclaratorExtension
                    ruleref gccDeclaratorExtension
                  ebnfSuffix *
        exceptionGroup 
    ruleSpec directAbstractDeclarator:'('abstractDeclarator')'gccDeclaratorExtension*|'['typeQualifierList?assignmentExpression?']'|'[''static'typeQualifierList?assignmentExpression']'|'['typeQualifierList'static'assignmentExpression']'|'[''*'']'|'('parameterTypeList?')'gccDeclaratorExtension*|directAbstractDeclarator'['typeQualifierList?assignmentExpression?']'|directAbstractDeclarator'[''static'typeQualifierList?assignmentExpression']'|directAbstractDeclarator'['typeQualifierList'static'assignmentExpression']'|directAbstractDeclarator'[''*'']'|directAbstractDeclarator'('parameterTypeList?')'gccDeclaratorExtension*;
      parserRuleSpec directAbstractDeclarator:'('abstractDeclarator')'gccDeclaratorExtension*|'['typeQualifierList?assignmentExpression?']'|'[''static'typeQualifierList?assignmentExpression']'|'['typeQualifierList'static'assignmentExpression']'|'[''*'']'|'('parameterTypeList?')'gccDeclaratorExtension*|directAbstractDeclarator'['typeQualifierList?assignmentExpression?']'|directAbstractDeclarator'[''static'typeQualifierList?assignmentExpression']'|directAbstractDeclarator'['typeQualifierList'static'assignmentExpression']'|directAbstractDeclarator'[''*'']'|directAbstractDeclarator'('parameterTypeList?')'gccDeclaratorExtension*;
        ruleBlock '('abstractDeclarator')'gccDeclaratorExtension*|'['typeQualifierList?assignmentExpression?']'|'[''static'typeQualifierList?assignmentExpression']'|'['typeQualifierList'static'assignmentExpression']'|'[''*'']'|'('parameterTypeList?')'gccDeclaratorExtension*|directAbstractDeclarator'['typeQualifierList?assignmentExpression?']'|directAbstractDeclarator'[''static'typeQualifierList?assignmentExpression']'|directAbstractDeclarator'['typeQualifierList'static'assignmentExpression']'|directAbstractDeclarator'[''*'']'|directAbstractDeclarator'('parameterTypeList?')'gccDeclaratorExtension*
          ruleAltList '('abstractDeclarator')'gccDeclaratorExtension*|'['typeQualifierList?assignmentExpression?']'|'[''static'typeQualifierList?assignmentExpression']'|'['typeQualifierList'static'assignmentExpression']'|'[''*'']'|'('parameterTypeList?')'gccDeclaratorExtension*|directAbstractDeclarator'['typeQualifierList?assignmentExpression?']'|directAbstractDeclarator'[''static'typeQualifierList?assignmentExpression']'|directAbstractDeclarator'['typeQualifierList'static'assignmentExpression']'|directAbstractDeclarator'[''*'']'|directAbstractDeclarator'('parameterTypeList?')'gccDeclaratorExtension*
            labeledAlt '('abstractDeclarator')'gccDeclaratorExtension*
              alternative '('abstractDeclarator')'gccDeclaratorExtension*
                element '('
                  atom '('
                    terminal '('
                element abstractDeclarator
                  atom abstractDeclarator
                    ruleref abstractDeclarator
                element ')'
                  atom ')'
                    terminal ')'
                element gccDeclaratorExtension*
                  atom gccDeclaratorExtension
                    ruleref gccDeclaratorExtension
                  ebnfSuffix *
            labeledAlt '['typeQualifierList?assignmentExpression?']'
              alternative '['typeQualifierList?assignmentExpression?']'
                element '['
                  atom '['
                    terminal '['
                element typeQualifierList?
                  atom typeQualifierList
                    ruleref typeQualifierList
                  ebnfSuffix ?
                element assignmentExpression?
                  atom assignmentExpression
                    ruleref assignmentExpression
                  ebnfSuffix ?
                element ']'
                  atom ']'
                    terminal ']'
            labeledAlt '[''static'typeQualifierList?assignmentExpression']'
              alternative '[''static'typeQualifierList?assignmentExpression']'
                element '['
                  atom '['
                    terminal '['
                element 'static'
                  atom 'static'
                    terminal 'static'
                element typeQualifierList?
                  atom typeQualifierList
                    ruleref typeQualifierList
                  ebnfSuffix ?
                element assignmentExpression
                  atom assignmentExpression
                    ruleref assignmentExpression
                element ']'
                  atom ']'
                    terminal ']'
            labeledAlt '['typeQualifierList'static'assignmentExpression']'
              alternative '['typeQualifierList'static'assignmentExpression']'
                element '['
                  atom '['
                    terminal '['
                element typeQualifierList
                  atom typeQualifierList
                    ruleref typeQualifierList
                element 'static'
                  atom 'static'
                    terminal 'static'
                element assignmentExpression
                  atom assignmentExpression
                    ruleref assignmentExpression
                element ']'
                  atom ']'
                    terminal ']'
            labeledAlt '[''*'']'
              alternative '[''*'']'
                element '['
                  atom '['
                    terminal '['
                element '*'
                  atom '*'
                    terminal '*'
                element ']'
                  atom ']'
                    terminal ']'
            labeledAlt '('parameterTypeList?')'gccDeclaratorExtension*
              alternative '('parameterTypeList?')'gccDeclaratorExtension*
                element '('
                  atom '('
                    terminal '('
                element parameterTypeList?
                  atom parameterTypeList
                    ruleref parameterTypeList
                  ebnfSuffix ?
                element ')'
                  atom ')'
                    terminal ')'
                element gccDeclaratorExtension*
                  atom gccDeclaratorExtension
                    ruleref gccDeclaratorExtension
                  ebnfSuffix *
            labeledAlt directAbstractDeclarator'['typeQualifierList?assignmentExpression?']'
              alternative directAbstractDeclarator'['typeQualifierList?assignmentExpression?']'
                element directAbstractDeclarator
                  atom directAbstractDeclarator
                    ruleref directAbstractDeclarator
                element '['
                  atom '['
                    terminal '['
                element typeQualifierList?
                  atom typeQualifierList
                    ruleref typeQualifierList
                  ebnfSuffix ?
                element assignmentExpression?
                  atom assignmentExpression
                    ruleref assignmentExpression
                  ebnfSuffix ?
                element ']'
                  atom ']'
                    terminal ']'
            labeledAlt directAbstractDeclarator'[''static'typeQualifierList?assignmentExpression']'
              alternative directAbstractDeclarator'[''static'typeQualifierList?assignmentExpression']'
                element directAbstractDeclarator
                  atom directAbstractDeclarator
                    ruleref directAbstractDeclarator
                element '['
                  atom '['
                    terminal '['
                element 'static'
                  atom 'static'
                    terminal 'static'
                element typeQualifierList?
                  atom typeQualifierList
                    ruleref typeQualifierList
                  ebnfSuffix ?
                element assignmentExpression
                  atom assignmentExpression
                    ruleref assignmentExpression
                element ']'
                  atom ']'
                    terminal ']'
            labeledAlt directAbstractDeclarator'['typeQualifierList'static'assignmentExpression']'
              alternative directAbstractDeclarator'['typeQualifierList'static'assignmentExpression']'
                element directAbstractDeclarator
                  atom directAbstractDeclarator
                    ruleref directAbstractDeclarator
                element '['
                  atom '['
                    terminal '['
                element typeQualifierList
                  atom typeQualifierList
                    ruleref typeQualifierList
                element 'static'
                  atom 'static'
                    terminal 'static'
                element assignmentExpression
                  atom assignmentExpression
                    ruleref assignmentExpression
                element ']'
                  atom ']'
                    terminal ']'
            labeledAlt directAbstractDeclarator'[''*'']'
              alternative directAbstractDeclarator'[''*'']'
                element directAbstractDeclarator
                  atom directAbstractDeclarator
                    ruleref directAbstractDeclarator
                element '['
                  atom '['
                    terminal '['
                element '*'
                  atom '*'
                    terminal '*'
                element ']'
                  atom ']'
                    terminal ']'
            labeledAlt directAbstractDeclarator'('parameterTypeList?')'gccDeclaratorExtension*
              alternative directAbstractDeclarator'('parameterTypeList?')'gccDeclaratorExtension*
                element directAbstractDeclarator
                  atom directAbstractDeclarator
                    ruleref directAbstractDeclarator
                element '('
                  atom '('
                    terminal '('
                element parameterTypeList?
                  atom parameterTypeList
                    ruleref parameterTypeList
                  ebnfSuffix ?
                element ')'
                  atom ')'
                    terminal ')'
                element gccDeclaratorExtension*
                  atom gccDeclaratorExtension
                    ruleref gccDeclaratorExtension
                  ebnfSuffix *
        exceptionGroup 
    ruleSpec typedefName:Identifier;
      parserRuleSpec typedefName:Identifier;
        ruleBlock Identifier
          ruleAltList Identifier
            labeledAlt Identifier
              alternative Identifier
                element Identifier
                  atom Identifier
                    terminal Identifier
        exceptionGroup 
    ruleSpec initializer:assignmentExpression|'{'initializerList'}'|'{'initializerList',''}';
      parserRuleSpec initializer:assignmentExpression|'{'initializerList'}'|'{'initializerList',''}';
        ruleBlock assignmentExpression|'{'initializerList'}'|'{'initializerList',''}'
          ruleAltList assignmentExpression|'{'initializerList'}'|'{'initializerList',''}'
            labeledAlt assignmentExpression
              alternative assignmentExpression
                element assignmentExpression
                  atom assignmentExpression
                    ruleref assignmentExpression
            labeledAlt '{'initializerList'}'
              alternative '{'initializerList'}'
                element '{'
                  atom '{'
                    terminal '{'
                element initializerList
                  atom initializerList
                    ruleref initializerList
                element '}'
                  atom '}'
                    terminal '}'
            labeledAlt '{'initializerList',''}'
              alternative '{'initializerList',''}'
                element '{'
                  atom '{'
                    terminal '{'
                element initializerList
                  atom initializerList
                    ruleref initializerList
                element ','
                  atom ','
                    terminal ','
                element '}'
                  atom '}'
                    terminal '}'
        exceptionGroup 
    ruleSpec initializerList:designation?initializer|initializerList','designation?initializer;
      parserRuleSpec initializerList:designation?initializer|initializerList','designation?initializer;
        ruleBlock designation?initializer|initializerList','designation?initializer
          ruleAltList designation?initializer|initializerList','designation?initializer
            labeledAlt designation?initializer
              alternative designation?initializer
                element designation?
                  atom designation
                    ruleref designation
                  ebnfSuffix ?
                element initializer
                  atom initializer
                    ruleref initializer
            labeledAlt initializerList','designation?initializer
              alternative initializerList','designation?initializer
                element initializerList
                  atom initializerList
                    ruleref initializerList
                element ','
                  atom ','
                    terminal ','
                element designation?
                  atom designation
                    ruleref designation
                  ebnfSuffix ?
                element initializer
                  atom initializer
                    ruleref initializer
        exceptionGroup 
    ruleSpec designation:designatorList'=';
      parserRuleSpec designation:designatorList'=';
        ruleBlock designatorList'='
          ruleAltList designatorList'='
            labeledAlt designatorList'='
              alternative designatorList'='
                element designatorList
                  atom designatorList
                    ruleref designatorList
                element '='
                  atom '='
                    terminal '='
        exceptionGroup 
    ruleSpec designatorList:designator|designatorListdesignator;
      parserRuleSpec designatorList:designator|designatorListdesignator;
        ruleBlock designator|designatorListdesignator
          ruleAltList designator|designatorListdesignator
            labeledAlt designator
              alternative designator
                element designator
                  atom designator
                    ruleref designator
            labeledAlt designatorListdesignator
              alternative designatorListdesignator
                element designatorList
                  atom designatorList
                    ruleref designatorList
                element designator
                  atom designator
                    ruleref designator
        exceptionGroup 
    ruleSpec designator:'['constantExpression']'|'.'Identifier;
      parserRuleSpec designator:'['constantExpression']'|'.'Identifier;
        ruleBlock '['constantExpression']'|'.'Identifier
          ruleAltList '['constantExpression']'|'.'Identifier
            labeledAlt '['constantExpression']'
              alternative '['constantExpression']'
                element '['
                  atom '['
                    terminal '['
                element constantExpression
                  atom constantExpression
                    ruleref constantExpression
                element ']'
                  atom ']'
                    terminal ']'
            labeledAlt '.'Identifier
              alternative '.'Identifier
                element '.'
                  atom '.'
                    terminal '.'
                element Identifier
                  atom Identifier
                    terminal Identifier
        exceptionGroup 
    ruleSpec staticAssertDeclaration:'_Static_assert''('constantExpression','StringLiteral+')'';';
      parserRuleSpec staticAssertDeclaration:'_Static_assert''('constantExpression','StringLiteral+')'';';
        ruleBlock '_Static_assert''('constantExpression','StringLiteral+')'';'
          ruleAltList '_Static_assert''('constantExpression','StringLiteral+')'';'
            labeledAlt '_Static_assert''('constantExpression','StringLiteral+')'';'
              alternative '_Static_assert''('constantExpression','StringLiteral+')'';'
                element '_Static_assert'
                  atom '_Static_assert'
                    terminal '_Static_assert'
                element '('
                  atom '('
                    terminal '('
                element constantExpression
                  atom constantExpression
                    ruleref constantExpression
                element ','
                  atom ','
                    terminal ','
                element StringLiteral+
                  atom StringLiteral
                    terminal StringLiteral
                  ebnfSuffix +
                element ')'
                  atom ')'
                    terminal ')'
                element ';'
                  atom ';'
                    terminal ';'
        exceptionGroup 
    ruleSpec statement:labeledStatement|compoundStatement|expressionStatement|selectionStatement|iterationStatement|jumpStatement|('__asm'|'__asm__')('volatile'|'__volatile__')'('(logicalOrExpression(','logicalOrExpression)*)?(':'(logicalOrExpression(','logicalOrExpression)*)?)*')'';';
      parserRuleSpec statement:labeledStatement|compoundStatement|expressionStatement|selectionStatement|iterationStatement|jumpStatement|('__asm'|'__asm__')('volatile'|'__volatile__')'('(logicalOrExpression(','logicalOrExpression)*)?(':'(logicalOrExpression(','logicalOrExpression)*)?)*')'';';
        ruleBlock labeledStatement|compoundStatement|expressionStatement|selectionStatement|iterationStatement|jumpStatement|('__asm'|'__asm__')('volatile'|'__volatile__')'('(logicalOrExpression(','logicalOrExpression)*)?(':'(logicalOrExpression(','logicalOrExpression)*)?)*')'';'
          ruleAltList labeledStatement|compoundStatement|expressionStatement|selectionStatement|iterationStatement|jumpStatement|('__asm'|'__asm__')('volatile'|'__volatile__')'('(logicalOrExpression(','logicalOrExpression)*)?(':'(logicalOrExpression(','logicalOrExpression)*)?)*')'';'
            labeledAlt labeledStatement
              alternative labeledStatement
                element labeledStatement
                  atom labeledStatement
                    ruleref labeledStatement
            labeledAlt compoundStatement
              alternative compoundStatement
                element compoundStatement
                  atom compoundStatement
                    ruleref compoundStatement
            labeledAlt expressionStatement
              alternative expressionStatement
                element expressionStatement
                  atom expressionStatement
                    ruleref expressionStatement
            labeledAlt selectionStatement
              alternative selectionStatement
                element selectionStatement
                  atom selectionStatement
                    ruleref selectionStatement
            labeledAlt iterationStatement
              alternative iterationStatement
                element iterationStatement
                  atom iterationStatement
                    ruleref iterationStatement
            labeledAlt jumpStatement
              alternative jumpStatement
                element jumpStatement
                  atom jumpStatement
                    ruleref jumpStatement
            labeledAlt ('__asm'|'__asm__')('volatile'|'__volatile__')'('(logicalOrExpression(','logicalOrExpression)*)?(':'(logicalOrExpression(','logicalOrExpression)*)?)*')'';'
              alternative ('__asm'|'__asm__')('volatile'|'__volatile__')'('(logicalOrExpression(','logicalOrExpression)*)?(':'(logicalOrExpression(','logicalOrExpression)*)?)*')'';'
                element ('__asm'|'__asm__')
                  ebnf ('__asm'|'__asm__')
                    block ('__asm'|'__asm__')
                      altList '__asm'|'__asm__'
                        alternative '__asm'
                          element '__asm'
                            atom '__asm'
                              terminal '__asm'
                        alternative '__asm__'
                          element '__asm__'
                            atom '__asm__'
                              terminal '__asm__'
                element ('volatile'|'__volatile__')
                  ebnf ('volatile'|'__volatile__')
                    block ('volatile'|'__volatile__')
                      altList 'volatile'|'__volatile__'
                        alternative 'volatile'
                          element 'volatile'
                            atom 'volatile'
                              terminal 'volatile'
                        alternative '__volatile__'
                          element '__volatile__'
                            atom '__volatile__'
                              terminal '__volatile__'
                element '('
                  atom '('
                    terminal '('
                element (logicalOrExpression(','logicalOrExpression)*)?
                  ebnf (logicalOrExpression(','logicalOrExpression)*)?
                    block (logicalOrExpression(','logicalOrExpression)*)
                      altList logicalOrExpression(','logicalOrExpression)*
                        alternative logicalOrExpression(','logicalOrExpression)*
                          element logicalOrExpression
                            atom logicalOrExpression
                              ruleref logicalOrExpression
                          element (','logicalOrExpression)*
                            ebnf (','logicalOrExpression)*
                              block (','logicalOrExpression)
                                altList ','logicalOrExpression
                                  alternative ','logicalOrExpression
                                    element ','
                                      atom ','
                                        terminal ','
                                    element logicalOrExpression
                                      atom logicalOrExpression
                                        ruleref logicalOrExpression
                              blockSuffix *
                                ebnfSuffix *
                    blockSuffix ?
                      ebnfSuffix ?
                element (':'(logicalOrExpression(','logicalOrExpression)*)?)*
                  ebnf (':'(logicalOrExpression(','logicalOrExpression)*)?)*
                    block (':'(logicalOrExpression(','logicalOrExpression)*)?)
                      altList ':'(logicalOrExpression(','logicalOrExpression)*)?
                        alternative ':'(logicalOrExpression(','logicalOrExpression)*)?
                          element ':'
                            atom ':'
                              terminal ':'
                          element (logicalOrExpression(','logicalOrExpression)*)?
                            ebnf (logicalOrExpression(','logicalOrExpression)*)?
                              block (logicalOrExpression(','logicalOrExpression)*)
                                altList logicalOrExpression(','logicalOrExpression)*
                                  alternative logicalOrExpression(','logicalOrExpression)*
                                    element logicalOrExpression
                                      atom logicalOrExpression
                                        ruleref logicalOrExpression
                                    element (','logicalOrExpression)*
                                      ebnf (','logicalOrExpression)*
                                        block (','logicalOrExpression)
                                          altList ','logicalOrExpression
                                            alternative ','logicalOrExpression
                                              element ','
                                                atom ','
                                                  terminal ','
                                              element logicalOrExpression
                                                atom logicalOrExpression
                                                  ruleref logicalOrExpression
                                        blockSuffix *
                                          ebnfSuffix *
                              blockSuffix ?
                                ebnfSuffix ?
                    blockSuffix *
                      ebnfSuffix *
                element ')'
                  atom ')'
                    terminal ')'
                element ';'
                  atom ';'
                    terminal ';'
        exceptionGroup 
    ruleSpec labeledStatement:Identifier':'statement|'case'constantExpression':'statement|'default'':'statement;
      parserRuleSpec labeledStatement:Identifier':'statement|'case'constantExpression':'statement|'default'':'statement;
        ruleBlock Identifier':'statement|'case'constantExpression':'statement|'default'':'statement
          ruleAltList Identifier':'statement|'case'constantExpression':'statement|'default'':'statement
            labeledAlt Identifier':'statement
              alternative Identifier':'statement
                element Identifier
                  atom Identifier
                    terminal Identifier
                element ':'
                  atom ':'
                    terminal ':'
                element statement
                  atom statement
                    ruleref statement
            labeledAlt 'case'constantExpression':'statement
              alternative 'case'constantExpression':'statement
                element 'case'
                  atom 'case'
                    terminal 'case'
                element constantExpression
                  atom constantExpression
                    ruleref constantExpression
                element ':'
                  atom ':'
                    terminal ':'
                element statement
                  atom statement
                    ruleref statement
            labeledAlt 'default'':'statement
              alternative 'default'':'statement
                element 'default'
                  atom 'default'
                    terminal 'default'
                element ':'
                  atom ':'
                    terminal ':'
                element statement
                  atom statement
                    ruleref statement
        exceptionGroup 
    ruleSpec compoundStatement:'{'blockItemList?'}';
      parserRuleSpec compoundStatement:'{'blockItemList?'}';
        ruleBlock '{'blockItemList?'}'
          ruleAltList '{'blockItemList?'}'
            labeledAlt '{'blockItemList?'}'
              alternative '{'blockItemList?'}'
                element '{'
                  atom '{'
                    terminal '{'
                element blockItemList?
                  atom blockItemList
                    ruleref blockItemList
                  ebnfSuffix ?
                element '}'
                  atom '}'
                    terminal '}'
        exceptionGroup 
    ruleSpec blockItemList:blockItem|blockItemListblockItem;
      parserRuleSpec blockItemList:blockItem|blockItemListblockItem;
        ruleBlock blockItem|blockItemListblockItem
          ruleAltList blockItem|blockItemListblockItem
            labeledAlt blockItem
              alternative blockItem
                element blockItem
                  atom blockItem
                    ruleref blockItem
            labeledAlt blockItemListblockItem
              alternative blockItemListblockItem
                element blockItemList
                  atom blockItemList
                    ruleref blockItemList
                element blockItem
                  atom blockItem
                    ruleref blockItem
        exceptionGroup 
    ruleSpec blockItem:declaration|statement;
      parserRuleSpec blockItem:declaration|statement;
        ruleBlock declaration|statement
          ruleAltList declaration|statement
            labeledAlt declaration
              alternative declaration
                element declaration
                  atom declaration
                    ruleref declaration
            labeledAlt statement
              alternative statement
                element statement
                  atom statement
                    ruleref statement
        exceptionGroup 
    ruleSpec expressionStatement:expression?';';
      parserRuleSpec expressionStatement:expression?';';
        ruleBlock expression?';'
          ruleAltList expression?';'
            labeledAlt expression?';'
              alternative expression?';'
                element expression?
                  atom expression
                    ruleref expression
                  ebnfSuffix ?
                element ';'
                  atom ';'
                    terminal ';'
        exceptionGroup 
    ruleSpec selectionStatement:'if''('expression')'statement('else'statement)?|'switch''('expression')'statement;
      parserRuleSpec selectionStatement:'if''('expression')'statement('else'statement)?|'switch''('expression')'statement;
        ruleBlock 'if''('expression')'statement('else'statement)?|'switch''('expression')'statement
          ruleAltList 'if''('expression')'statement('else'statement)?|'switch''('expression')'statement
            labeledAlt 'if''('expression')'statement('else'statement)?
              alternative 'if''('expression')'statement('else'statement)?
                element 'if'
                  atom 'if'
                    terminal 'if'
                element '('
                  atom '('
                    terminal '('
                element expression
                  atom expression
                    ruleref expression
                element ')'
                  atom ')'
                    terminal ')'
                element statement
                  atom statement
                    ruleref statement
                element ('else'statement)?
                  ebnf ('else'statement)?
                    block ('else'statement)
                      altList 'else'statement
                        alternative 'else'statement
                          element 'else'
                            atom 'else'
                              terminal 'else'
                          element statement
                            atom statement
                              ruleref statement
                    blockSuffix ?
                      ebnfSuffix ?
            labeledAlt 'switch''('expression')'statement
              alternative 'switch''('expression')'statement
                element 'switch'
                  atom 'switch'
                    terminal 'switch'
                element '('
                  atom '('
                    terminal '('
                element expression
                  atom expression
                    ruleref expression
                element ')'
                  atom ')'
                    terminal ')'
                element statement
                  atom statement
                    ruleref statement
        exceptionGroup 
    ruleSpec iterationStatement:While'('expression')'statement|DostatementWhile'('expression')'';'|For'('forCondition')'statement;
      parserRuleSpec iterationStatement:While'('expression')'statement|DostatementWhile'('expression')'';'|For'('forCondition')'statement;
        ruleBlock While'('expression')'statement|DostatementWhile'('expression')'';'|For'('forCondition')'statement
          ruleAltList While'('expression')'statement|DostatementWhile'('expression')'';'|For'('forCondition')'statement
            labeledAlt While'('expression')'statement
              alternative While'('expression')'statement
                element While
                  atom While
                    terminal While
                element '('
                  atom '('
                    terminal '('
                element expression
                  atom expression
                    ruleref expression
                element ')'
                  atom ')'
                    terminal ')'
                element statement
                  atom statement
                    ruleref statement
            labeledAlt DostatementWhile'('expression')'';'
              alternative DostatementWhile'('expression')'';'
                element Do
                  atom Do
                    terminal Do
                element statement
                  atom statement
                    ruleref statement
                element While
                  atom While
                    terminal While
                element '('
                  atom '('
                    terminal '('
                element expression
                  atom expression
                    ruleref expression
                element ')'
                  atom ')'
                    terminal ')'
                element ';'
                  atom ';'
                    terminal ';'
            labeledAlt For'('forCondition')'statement
              alternative For'('forCondition')'statement
                element For
                  atom For
                    terminal For
                element '('
                  atom '('
                    terminal '('
                element forCondition
                  atom forCondition
                    ruleref forCondition
                element ')'
                  atom ')'
                    terminal ')'
                element statement
                  atom statement
                    ruleref statement
        exceptionGroup 
    ruleSpec forCondition:forDeclaration';'forExpression?';'forExpression?|expression?';'forExpression?';'forExpression?;
      parserRuleSpec forCondition:forDeclaration';'forExpression?';'forExpression?|expression?';'forExpression?';'forExpression?;
        ruleBlock forDeclaration';'forExpression?';'forExpression?|expression?';'forExpression?';'forExpression?
          ruleAltList forDeclaration';'forExpression?';'forExpression?|expression?';'forExpression?';'forExpression?
            labeledAlt forDeclaration';'forExpression?';'forExpression?
              alternative forDeclaration';'forExpression?';'forExpression?
                element forDeclaration
                  atom forDeclaration
                    ruleref forDeclaration
                element ';'
                  atom ';'
                    terminal ';'
                element forExpression?
                  atom forExpression
                    ruleref forExpression
                  ebnfSuffix ?
                element ';'
                  atom ';'
                    terminal ';'
                element forExpression?
                  atom forExpression
                    ruleref forExpression
                  ebnfSuffix ?
            labeledAlt expression?';'forExpression?';'forExpression?
              alternative expression?';'forExpression?';'forExpression?
                element expression?
                  atom expression
                    ruleref expression
                  ebnfSuffix ?
                element ';'
                  atom ';'
                    terminal ';'
                element forExpression?
                  atom forExpression
                    ruleref forExpression
                  ebnfSuffix ?
                element ';'
                  atom ';'
                    terminal ';'
                element forExpression?
                  atom forExpression
                    ruleref forExpression
                  ebnfSuffix ?
        exceptionGroup 
    ruleSpec forDeclaration:declarationSpecifiersinitDeclaratorList|declarationSpecifiers;
      parserRuleSpec forDeclaration:declarationSpecifiersinitDeclaratorList|declarationSpecifiers;
        ruleBlock declarationSpecifiersinitDeclaratorList|declarationSpecifiers
          ruleAltList declarationSpecifiersinitDeclaratorList|declarationSpecifiers
            labeledAlt declarationSpecifiersinitDeclaratorList
              alternative declarationSpecifiersinitDeclaratorList
                element declarationSpecifiers
                  atom declarationSpecifiers
                    ruleref declarationSpecifiers
                element initDeclaratorList
                  atom initDeclaratorList
                    ruleref initDeclaratorList
            labeledAlt declarationSpecifiers
              alternative declarationSpecifiers
                element declarationSpecifiers
                  atom declarationSpecifiers
                    ruleref declarationSpecifiers
        exceptionGroup 
    ruleSpec forExpression:assignmentExpression|forExpression','assignmentExpression;
      parserRuleSpec forExpression:assignmentExpression|forExpression','assignmentExpression;
        ruleBlock assignmentExpression|forExpression','assignmentExpression
          ruleAltList assignmentExpression|forExpression','assignmentExpression
            labeledAlt assignmentExpression
              alternative assignmentExpression
                element assignmentExpression
                  atom assignmentExpression
                    ruleref assignmentExpression
            labeledAlt forExpression','assignmentExpression
              alternative forExpression','assignmentExpression
                element forExpression
                  atom forExpression
                    ruleref forExpression
                element ','
                  atom ','
                    terminal ','
                element assignmentExpression
                  atom assignmentExpression
                    ruleref assignmentExpression
        exceptionGroup 
    ruleSpec jumpStatement:'goto'Identifier';'|'continue'';'|'break'';'|'return'expression?';'|'goto'unaryExpression';';
      parserRuleSpec jumpStatement:'goto'Identifier';'|'continue'';'|'break'';'|'return'expression?';'|'goto'unaryExpression';';
        ruleBlock 'goto'Identifier';'|'continue'';'|'break'';'|'return'expression?';'|'goto'unaryExpression';'
          ruleAltList 'goto'Identifier';'|'continue'';'|'break'';'|'return'expression?';'|'goto'unaryExpression';'
            labeledAlt 'goto'Identifier';'
              alternative 'goto'Identifier';'
                element 'goto'
                  atom 'goto'
                    terminal 'goto'
                element Identifier
                  atom Identifier
                    terminal Identifier
                element ';'
                  atom ';'
                    terminal ';'
            labeledAlt 'continue'';'
              alternative 'continue'';'
                element 'continue'
                  atom 'continue'
                    terminal 'continue'
                element ';'
                  atom ';'
                    terminal ';'
            labeledAlt 'break'';'
              alternative 'break'';'
                element 'break'
                  atom 'break'
                    terminal 'break'
                element ';'
                  atom ';'
                    terminal ';'
            labeledAlt 'return'expression?';'
              alternative 'return'expression?';'
                element 'return'
                  atom 'return'
                    terminal 'return'
                element expression?
                  atom expression
                    ruleref expression
                  ebnfSuffix ?
                element ';'
                  atom ';'
                    terminal ';'
            labeledAlt 'goto'unaryExpression';'
              alternative 'goto'unaryExpression';'
                element 'goto'
                  atom 'goto'
                    terminal 'goto'
                element unaryExpression
                  atom unaryExpression
                    ruleref unaryExpression
                element ';'
                  atom ';'
                    terminal ';'
        exceptionGroup 
    ruleSpec compilationUnit:translationUnit?EOF;
      parserRuleSpec compilationUnit:translationUnit?EOF;
        ruleBlock translationUnit?EOF
          ruleAltList translationUnit?EOF
            labeledAlt translationUnit?EOF
              alternative translationUnit?EOF
                element translationUnit?
                  atom translationUnit
                    ruleref translationUnit
                  ebnfSuffix ?
                element EOF
                  atom EOF
                    terminal EOF
        exceptionGroup 
    ruleSpec translationUnit:externalDeclaration|translationUnitexternalDeclaration;
      parserRuleSpec translationUnit:externalDeclaration|translationUnitexternalDeclaration;
        ruleBlock externalDeclaration|translationUnitexternalDeclaration
          ruleAltList externalDeclaration|translationUnitexternalDeclaration
            labeledAlt externalDeclaration
              alternative externalDeclaration
                element externalDeclaration
                  atom externalDeclaration
                    ruleref externalDeclaration
            labeledAlt translationUnitexternalDeclaration
              alternative translationUnitexternalDeclaration
                element translationUnit
                  atom translationUnit
                    ruleref translationUnit
                element externalDeclaration
                  atom externalDeclaration
                    ruleref externalDeclaration
        exceptionGroup 
    ruleSpec externalDeclaration:functionDefinition|declaration|';';
      parserRuleSpec externalDeclaration:functionDefinition|declaration|';';
        ruleBlock functionDefinition|declaration|';'
          ruleAltList functionDefinition|declaration|';'
            labeledAlt functionDefinition
              alternative functionDefinition
                element functionDefinition
                  atom functionDefinition
                    ruleref functionDefinition
            labeledAlt declaration
              alternative declaration
                element declaration
                  atom declaration
                    ruleref declaration
            labeledAlt ';'
              alternative ';'
                element ';'
                  atom ';'
                    terminal ';'
        exceptionGroup 
    ruleSpec functionDefinition:declarationSpecifiers?declaratordeclarationList?compoundStatement;
      parserRuleSpec functionDefinition:declarationSpecifiers?declaratordeclarationList?compoundStatement;
        ruleBlock declarationSpecifiers?declaratordeclarationList?compoundStatement
          ruleAltList declarationSpecifiers?declaratordeclarationList?compoundStatement
            labeledAlt declarationSpecifiers?declaratordeclarationList?compoundStatement
              alternative declarationSpecifiers?declaratordeclarationList?compoundStatement
                element declarationSpecifiers?
                  atom declarationSpecifiers
                    ruleref declarationSpecifiers
                  ebnfSuffix ?
                element declarator
                  atom declarator
                    ruleref declarator
                element declarationList?
                  atom declarationList
                    ruleref declarationList
                  ebnfSuffix ?
                element compoundStatement
                  atom compoundStatement
                    ruleref compoundStatement
        exceptionGroup 
    ruleSpec declarationList:declaration|declarationListdeclaration;
      parserRuleSpec declarationList:declaration|declarationListdeclaration;
        ruleBlock declaration|declarationListdeclaration
          ruleAltList declaration|declarationListdeclaration
            labeledAlt declaration
              alternative declaration
                element declaration
                  atom declaration
                    ruleref declaration
            labeledAlt declarationListdeclaration
              alternative declarationListdeclaration
                element declarationList
                  atom declarationList
                    ruleref declarationList
                element declaration
                  atom declaration
                    ruleref declaration
        exceptionGroup 
    ruleSpec Auto:'auto';
      lexerRuleSpec Auto:'auto';
        lexerRuleBlock 'auto'
          lexerAltList 'auto'
            lexerAlt 'auto'
              lexerElements 'auto'
                lexerElement 'auto'
                  lexerAtom 'auto'
                    terminal 'auto'
    ruleSpec Break:'break';
      lexerRuleSpec Break:'break';
        lexerRuleBlock 'break'
          lexerAltList 'break'
            lexerAlt 'break'
              lexerElements 'break'
                lexerElement 'break'
                  lexerAtom 'break'
                    terminal 'break'
    ruleSpec Case:'case';
      lexerRuleSpec Case:'case';
        lexerRuleBlock 'case'
          lexerAltList 'case'
            lexerAlt 'case'
              lexerElements 'case'
                lexerElement 'case'
                  lexerAtom 'case'
                    terminal 'case'
    ruleSpec Char:'char';
      lexerRuleSpec Char:'char';
        lexerRuleBlock 'char'
          lexerAltList 'char'
            lexerAlt 'char'
              lexerElements 'char'
                lexerElement 'char'
                  lexerAtom 'char'
                    terminal 'char'
    ruleSpec Const:'const';
      lexerRuleSpec Const:'const';
        lexerRuleBlock 'const'
          lexerAltList 'const'
            lexerAlt 'const'
              lexerElements 'const'
                lexerElement 'const'
                  lexerAtom 'const'
                    terminal 'const'
    ruleSpec Continue:'continue';
      lexerRuleSpec Continue:'continue';
        lexerRuleBlock 'continue'
          lexerAltList 'continue'
            lexerAlt 'continue'
              lexerElements 'continue'
                lexerElement 'continue'
                  lexerAtom 'continue'
                    terminal 'continue'
    ruleSpec Default:'default';
      lexerRuleSpec Default:'default';
        lexerRuleBlock 'default'
          lexerAltList 'default'
            lexerAlt 'default'
              lexerElements 'default'
                lexerElement 'default'
                  lexerAtom 'default'
                    terminal 'default'
    ruleSpec Do:'do';
      lexerRuleSpec Do:'do';
        lexerRuleBlock 'do'
          lexerAltList 'do'
            lexerAlt 'do'
              lexerElements 'do'
                lexerElement 'do'
                  lexerAtom 'do'
                    terminal 'do'
    ruleSpec Double:'double';
      lexerRuleSpec Double:'double';
        lexerRuleBlock 'double'
          lexerAltList 'double'
            lexerAlt 'double'
              lexerElements 'double'
                lexerElement 'double'
                  lexerAtom 'double'
                    terminal 'double'
    ruleSpec Else:'else';
      lexerRuleSpec Else:'else';
        lexerRuleBlock 'else'
          lexerAltList 'else'
            lexerAlt 'else'
              lexerElements 'else'
                lexerElement 'else'
                  lexerAtom 'else'
                    terminal 'else'
    ruleSpec Enum:'enum';
      lexerRuleSpec Enum:'enum';
        lexerRuleBlock 'enum'
          lexerAltList 'enum'
            lexerAlt 'enum'
              lexerElements 'enum'
                lexerElement 'enum'
                  lexerAtom 'enum'
                    terminal 'enum'
    ruleSpec Extern:'extern';
      lexerRuleSpec Extern:'extern';
        lexerRuleBlock 'extern'
          lexerAltList 'extern'
            lexerAlt 'extern'
              lexerElements 'extern'
                lexerElement 'extern'
                  lexerAtom 'extern'
                    terminal 'extern'
    ruleSpec Float:'float';
      lexerRuleSpec Float:'float';
        lexerRuleBlock 'float'
          lexerAltList 'float'
            lexerAlt 'float'
              lexerElements 'float'
                lexerElement 'float'
                  lexerAtom 'float'
                    terminal 'float'
    ruleSpec For:'for';
      lexerRuleSpec For:'for';
        lexerRuleBlock 'for'
          lexerAltList 'for'
            lexerAlt 'for'
              lexerElements 'for'
                lexerElement 'for'
                  lexerAtom 'for'
                    terminal 'for'
    ruleSpec Goto:'goto';
      lexerRuleSpec Goto:'goto';
        lexerRuleBlock 'goto'
          lexerAltList 'goto'
            lexerAlt 'goto'
              lexerElements 'goto'
                lexerElement 'goto'
                  lexerAtom 'goto'
                    terminal 'goto'
    ruleSpec If:'if';
      lexerRuleSpec If:'if';
        lexerRuleBlock 'if'
          lexerAltList 'if'
            lexerAlt 'if'
              lexerElements 'if'
                lexerElement 'if'
                  lexerAtom 'if'
                    terminal 'if'
    ruleSpec Inline:'inline';
      lexerRuleSpec Inline:'inline';
        lexerRuleBlock 'inline'
          lexerAltList 'inline'
            lexerAlt 'inline'
              lexerElements 'inline'
                lexerElement 'inline'
                  lexerAtom 'inline'
                    terminal 'inline'
    ruleSpec Int:'int';
      lexerRuleSpec Int:'int';
        lexerRuleBlock 'int'
          lexerAltList 'int'
            lexerAlt 'int'
              lexerElements 'int'
                lexerElement 'int'
                  lexerAtom 'int'
                    terminal 'int'
    ruleSpec Long:'long';
      lexerRuleSpec Long:'long';
        lexerRuleBlock 'long'
          lexerAltList 'long'
            lexerAlt 'long'
              lexerElements 'long'
                lexerElement 'long'
                  lexerAtom 'long'
                    terminal 'long'
    ruleSpec Register:'register';
      lexerRuleSpec Register:'register';
        lexerRuleBlock 'register'
          lexerAltList 'register'
            lexerAlt 'register'
              lexerElements 'register'
                lexerElement 'register'
                  lexerAtom 'register'
                    terminal 'register'
    ruleSpec Restrict:'restrict';
      lexerRuleSpec Restrict:'restrict';
        lexerRuleBlock 'restrict'
          lexerAltList 'restrict'
            lexerAlt 'restrict'
              lexerElements 'restrict'
                lexerElement 'restrict'
                  lexerAtom 'restrict'
                    terminal 'restrict'
    ruleSpec Return:'return';
      lexerRuleSpec Return:'return';
        lexerRuleBlock 'return'
          lexerAltList 'return'
            lexerAlt 'return'
              lexerElements 'return'
                lexerElement 'return'
                  lexerAtom 'return'
                    terminal 'return'
    ruleSpec Short:'short';
      lexerRuleSpec Short:'short';
        lexerRuleBlock 'short'
          lexerAltList 'short'
            lexerAlt 'short'
              lexerElements 'short'
                lexerElement 'short'
                  lexerAtom 'short'
                    terminal 'short'
    ruleSpec Signed:'signed';
      lexerRuleSpec Signed:'signed';
        lexerRuleBlock 'signed'
          lexerAltList 'signed'
            lexerAlt 'signed'
              lexerElements 'signed'
                lexerElement 'signed'
                  lexerAtom 'signed'
                    terminal 'signed'
    ruleSpec Sizeof:'sizeof';
      lexerRuleSpec Sizeof:'sizeof';
        lexerRuleBlock 'sizeof'
          lexerAltList 'sizeof'
            lexerAlt 'sizeof'
              lexerElements 'sizeof'
                lexerElement 'sizeof'
                  lexerAtom 'sizeof'
                    terminal 'sizeof'
    ruleSpec Static:'static';
      lexerRuleSpec Static:'static';
        lexerRuleBlock 'static'
          lexerAltList 'static'
            lexerAlt 'static'
              lexerElements 'static'
                lexerElement 'static'
                  lexerAtom 'static'
                    terminal 'static'
    ruleSpec Struct:'struct';
      lexerRuleSpec Struct:'struct';
        lexerRuleBlock 'struct'
          lexerAltList 'struct'
            lexerAlt 'struct'
              lexerElements 'struct'
                lexerElement 'struct'
                  lexerAtom 'struct'
                    terminal 'struct'
    ruleSpec Switch:'switch';
      lexerRuleSpec Switch:'switch';
        lexerRuleBlock 'switch'
          lexerAltList 'switch'
            lexerAlt 'switch'
              lexerElements 'switch'
                lexerElement 'switch'
                  lexerAtom 'switch'
                    terminal 'switch'
    ruleSpec Typedef:'typedef';
      lexerRuleSpec Typedef:'typedef';
        lexerRuleBlock 'typedef'
          lexerAltList 'typedef'
            lexerAlt 'typedef'
              lexerElements 'typedef'
                lexerElement 'typedef'
                  lexerAtom 'typedef'
                    terminal 'typedef'
    ruleSpec Union:'union';
      lexerRuleSpec Union:'union';
        lexerRuleBlock 'union'
          lexerAltList 'union'
            lexerAlt 'union'
              lexerElements 'union'
                lexerElement 'union'
                  lexerAtom 'union'
                    terminal 'union'
    ruleSpec Unsigned:'unsigned';
      lexerRuleSpec Unsigned:'unsigned';
        lexerRuleBlock 'unsigned'
          lexerAltList 'unsigned'
            lexerAlt 'unsigned'
              lexerElements 'unsigned'
                lexerElement 'unsigned'
                  lexerAtom 'unsigned'
                    terminal 'unsigned'
    ruleSpec Void:'void';
      lexerRuleSpec Void:'void';
        lexerRuleBlock 'void'
          lexerAltList 'void'
            lexerAlt 'void'
              lexerElements 'void'
                lexerElement 'void'
                  lexerAtom 'void'
                    terminal 'void'
    ruleSpec Volatile:'volatile';
      lexerRuleSpec Volatile:'volatile';
        lexerRuleBlock 'volatile'
          lexerAltList 'volatile'
            lexerAlt 'volatile'
              lexerElements 'volatile'
                lexerElement 'volatile'
                  lexerAtom 'volatile'
                    terminal 'volatile'
    ruleSpec While:'while';
      lexerRuleSpec While:'while';
        lexerRuleBlock 'while'
          lexerAltList 'while'
            lexerAlt 'while'
              lexerElements 'while'
                lexerElement 'while'
                  lexerAtom 'while'
                    terminal 'while'
    ruleSpec Alignas:'_Alignas';
      lexerRuleSpec Alignas:'_Alignas';
        lexerRuleBlock '_Alignas'
          lexerAltList '_Alignas'
            lexerAlt '_Alignas'
              lexerElements '_Alignas'
                lexerElement '_Alignas'
                  lexerAtom '_Alignas'
                    terminal '_Alignas'
    ruleSpec Alignof:'_Alignof';
      lexerRuleSpec Alignof:'_Alignof';
        lexerRuleBlock '_Alignof'
          lexerAltList '_Alignof'
            lexerAlt '_Alignof'
              lexerElements '_Alignof'
                lexerElement '_Alignof'
                  lexerAtom '_Alignof'
                    terminal '_Alignof'
    ruleSpec Atomic:'_Atomic';
      lexerRuleSpec Atomic:'_Atomic';
        lexerRuleBlock '_Atomic'
          lexerAltList '_Atomic'
            lexerAlt '_Atomic'
              lexerElements '_Atomic'
                lexerElement '_Atomic'
                  lexerAtom '_Atomic'
                    terminal '_Atomic'
    ruleSpec Bool:'_Bool';
      lexerRuleSpec Bool:'_Bool';
        lexerRuleBlock '_Bool'
          lexerAltList '_Bool'
            lexerAlt '_Bool'
              lexerElements '_Bool'
                lexerElement '_Bool'
                  lexerAtom '_Bool'
                    terminal '_Bool'
    ruleSpec Complex:'_Complex';
      lexerRuleSpec Complex:'_Complex';
        lexerRuleBlock '_Complex'
          lexerAltList '_Complex'
            lexerAlt '_Complex'
              lexerElements '_Complex'
                lexerElement '_Complex'
                  lexerAtom '_Complex'
                    terminal '_Complex'
    ruleSpec Generic:'_Generic';
      lexerRuleSpec Generic:'_Generic';
        lexerRuleBlock '_Generic'
          lexerAltList '_Generic'
            lexerAlt '_Generic'
              lexerElements '_Generic'
                lexerElement '_Generic'
                  lexerAtom '_Generic'
                    terminal '_Generic'
    ruleSpec Imaginary:'_Imaginary';
      lexerRuleSpec Imaginary:'_Imaginary';
        lexerRuleBlock '_Imaginary'
          lexerAltList '_Imaginary'
            lexerAlt '_Imaginary'
              lexerElements '_Imaginary'
                lexerElement '_Imaginary'
                  lexerAtom '_Imaginary'
                    terminal '_Imaginary'
    ruleSpec Noreturn:'_Noreturn';
      lexerRuleSpec Noreturn:'_Noreturn';
        lexerRuleBlock '_Noreturn'
          lexerAltList '_Noreturn'
            lexerAlt '_Noreturn'
              lexerElements '_Noreturn'
                lexerElement '_Noreturn'
                  lexerAtom '_Noreturn'
                    terminal '_Noreturn'
    ruleSpec StaticAssert:'_Static_assert';
      lexerRuleSpec StaticAssert:'_Static_assert';
        lexerRuleBlock '_Static_assert'
          lexerAltList '_Static_assert'
            lexerAlt '_Static_assert'
              lexerElements '_Static_assert'
                lexerElement '_Static_assert'
                  lexerAtom '_Static_assert'
                    terminal '_Static_assert'
    ruleSpec ThreadLocal:'_Thread_local';
      lexerRuleSpec ThreadLocal:'_Thread_local';
        lexerRuleBlock '_Thread_local'
          lexerAltList '_Thread_local'
            lexerAlt '_Thread_local'
              lexerElements '_Thread_local'
                lexerElement '_Thread_local'
                  lexerAtom '_Thread_local'
                    terminal '_Thread_local'
    ruleSpec LeftParen:'(';
      lexerRuleSpec LeftParen:'(';
        lexerRuleBlock '('
          lexerAltList '('
            lexerAlt '('
              lexerElements '('
                lexerElement '('
                  lexerAtom '('
                    terminal '('
    ruleSpec RightParen:')';
      lexerRuleSpec RightParen:')';
        lexerRuleBlock ')'
          lexerAltList ')'
            lexerAlt ')'
              lexerElements ')'
                lexerElement ')'
                  lexerAtom ')'
                    terminal ')'
    ruleSpec LeftBracket:'[';
      lexerRuleSpec LeftBracket:'[';
        lexerRuleBlock '['
          lexerAltList '['
            lexerAlt '['
              lexerElements '['
                lexerElement '['
                  lexerAtom '['
                    terminal '['
    ruleSpec RightBracket:']';
      lexerRuleSpec RightBracket:']';
        lexerRuleBlock ']'
          lexerAltList ']'
            lexerAlt ']'
              lexerElements ']'
                lexerElement ']'
                  lexerAtom ']'
                    terminal ']'
    ruleSpec LeftBrace:'{';
      lexerRuleSpec LeftBrace:'{';
        lexerRuleBlock '{'
          lexerAltList '{'
            lexerAlt '{'
              lexerElements '{'
                lexerElement '{'
                  lexerAtom '{'
                    terminal '{'
    ruleSpec RightBrace:'}';
      lexerRuleSpec RightBrace:'}';
        lexerRuleBlock '}'
          lexerAltList '}'
            lexerAlt '}'
              lexerElements '}'
                lexerElement '}'
                  lexerAtom '}'
                    terminal '}'
    ruleSpec Less:'<';
      lexerRuleSpec Less:'<';
        lexerRuleBlock '<'
          lexerAltList '<'
            lexerAlt '<'
              lexerElements '<'
                lexerElement '<'
                  lexerAtom '<'
                    terminal '<'
    ruleSpec LessEqual:'<=';
      lexerRuleSpec LessEqual:'<=';
        lexerRuleBlock '<='
          lexerAltList '<='
            lexerAlt '<='
              lexerElements '<='
                lexerElement '<='
                  lexerAtom '<='
                    terminal '<='
    ruleSpec Greater:'>';
      lexerRuleSpec Greater:'>';
        lexerRuleBlock '>'
          lexerAltList '>'
            lexerAlt '>'
              lexerElements '>'
                lexerElement '>'
                  lexerAtom '>'
                    terminal '>'
    ruleSpec GreaterEqual:'>=';
      lexerRuleSpec GreaterEqual:'>=';
        lexerRuleBlock '>='
          lexerAltList '>='
            lexerAlt '>='
              lexerElements '>='
                lexerElement '>='
                  lexerAtom '>='
                    terminal '>='
    ruleSpec LeftShift:'<<';
      lexerRuleSpec LeftShift:'<<';
        lexerRuleBlock '<<'
          lexerAltList '<<'
            lexerAlt '<<'
              lexerElements '<<'
                lexerElement '<<'
                  lexerAtom '<<'
                    terminal '<<'
    ruleSpec RightShift:'>>';
      lexerRuleSpec RightShift:'>>';
        lexerRuleBlock '>>'
          lexerAltList '>>'
            lexerAlt '>>'
              lexerElements '>>'
                lexerElement '>>'
                  lexerAtom '>>'
                    terminal '>>'
    ruleSpec Plus:'+';
      lexerRuleSpec Plus:'+';
        lexerRuleBlock '+'
          lexerAltList '+'
            lexerAlt '+'
              lexerElements '+'
                lexerElement '+'
                  lexerAtom '+'
                    terminal '+'
    ruleSpec PlusPlus:'++';
      lexerRuleSpec PlusPlus:'++';
        lexerRuleBlock '++'
          lexerAltList '++'
            lexerAlt '++'
              lexerElements '++'
                lexerElement '++'
                  lexerAtom '++'
                    terminal '++'
    ruleSpec Minus:'-';
      lexerRuleSpec Minus:'-';
        lexerRuleBlock '-'
          lexerAltList '-'
            lexerAlt '-'
              lexerElements '-'
                lexerElement '-'
                  lexerAtom '-'
                    terminal '-'
    ruleSpec MinusMinus:'--';
      lexerRuleSpec MinusMinus:'--';
        lexerRuleBlock '--'
          lexerAltList '--'
            lexerAlt '--'
              lexerElements '--'
                lexerElement '--'
                  lexerAtom '--'
                    terminal '--'
    ruleSpec Star:'*';
      lexerRuleSpec Star:'*';
        lexerRuleBlock '*'
          lexerAltList '*'
            lexerAlt '*'
              lexerElements '*'
                lexerElement '*'
                  lexerAtom '*'
                    terminal '*'
    ruleSpec Div:'/';
      lexerRuleSpec Div:'/';
        lexerRuleBlock '/'
          lexerAltList '/'
            lexerAlt '/'
              lexerElements '/'
                lexerElement '/'
                  lexerAtom '/'
                    terminal '/'
    ruleSpec Mod:'%';
      lexerRuleSpec Mod:'%';
        lexerRuleBlock '%'
          lexerAltList '%'
            lexerAlt '%'
              lexerElements '%'
                lexerElement '%'
                  lexerAtom '%'
                    terminal '%'
    ruleSpec And:'&';
      lexerRuleSpec And:'&';
        lexerRuleBlock '&'
          lexerAltList '&'
            lexerAlt '&'
              lexerElements '&'
                lexerElement '&'
                  lexerAtom '&'
                    terminal '&'
    ruleSpec Or:'|';
      lexerRuleSpec Or:'|';
        lexerRuleBlock '|'
          lexerAltList '|'
            lexerAlt '|'
              lexerElements '|'
                lexerElement '|'
                  lexerAtom '|'
                    terminal '|'
    ruleSpec AndAnd:'&&';
      lexerRuleSpec AndAnd:'&&';
        lexerRuleBlock '&&'
          lexerAltList '&&'
            lexerAlt '&&'
              lexerElements '&&'
                lexerElement '&&'
                  lexerAtom '&&'
                    terminal '&&'
    ruleSpec OrOr:'||';
      lexerRuleSpec OrOr:'||';
        lexerRuleBlock '||'
          lexerAltList '||'
            lexerAlt '||'
              lexerElements '||'
                lexerElement '||'
                  lexerAtom '||'
                    terminal '||'
    ruleSpec Caret:'^';
      lexerRuleSpec Caret:'^';
        lexerRuleBlock '^'
          lexerAltList '^'
            lexerAlt '^'
              lexerElements '^'
                lexerElement '^'
                  lexerAtom '^'
                    terminal '^'
    ruleSpec Not:'!';
      lexerRuleSpec Not:'!';
        lexerRuleBlock '!'
          lexerAltList '!'
            lexerAlt '!'
              lexerElements '!'
                lexerElement '!'
                  lexerAtom '!'
                    terminal '!'
    ruleSpec Tilde:'~';
      lexerRuleSpec Tilde:'~';
        lexerRuleBlock '~'
          lexerAltList '~'
            lexerAlt '~'
              lexerElements '~'
                lexerElement '~'
                  lexerAtom '~'
                    terminal '~'
    ruleSpec Question:'?';
      lexerRuleSpec Question:'?';
        lexerRuleBlock '?'
          lexerAltList '?'
            lexerAlt '?'
              lexerElements '?'
                lexerElement '?'
                  lexerAtom '?'
                    terminal '?'
    ruleSpec Colon:':';
      lexerRuleSpec Colon:':';
        lexerRuleBlock ':'
          lexerAltList ':'
            lexerAlt ':'
              lexerElements ':'
                lexerElement ':'
                  lexerAtom ':'
                    terminal ':'
    ruleSpec Semi:';';
      lexerRuleSpec Semi:';';
        lexerRuleBlock ';'
          lexerAltList ';'
            lexerAlt ';'
              lexerElements ';'
                lexerElement ';'
                  lexerAtom ';'
                    terminal ';'
    ruleSpec Comma:',';
      lexerRuleSpec Comma:',';
        lexerRuleBlock ','
          lexerAltList ','
            lexerAlt ','
              lexerElements ','
                lexerElement ','
                  lexerAtom ','
                    terminal ','
    ruleSpec Assign:'=';
      lexerRuleSpec Assign:'=';
        lexerRuleBlock '='
          lexerAltList '='
            lexerAlt '='
              lexerElements '='
                lexerElement '='
                  lexerAtom '='
                    terminal '='
    ruleSpec StarAssign:'*=';
      lexerRuleSpec StarAssign:'*=';
        lexerRuleBlock '*='
          lexerAltList '*='
            lexerAlt '*='
              lexerElements '*='
                lexerElement '*='
                  lexerAtom '*='
                    terminal '*='
    ruleSpec DivAssign:'/=';
      lexerRuleSpec DivAssign:'/=';
        lexerRuleBlock '/='
          lexerAltList '/='
            lexerAlt '/='
              lexerElements '/='
                lexerElement '/='
                  lexerAtom '/='
                    terminal '/='
    ruleSpec ModAssign:'%=';
      lexerRuleSpec ModAssign:'%=';
        lexerRuleBlock '%='
          lexerAltList '%='
            lexerAlt '%='
              lexerElements '%='
                lexerElement '%='
                  lexerAtom '%='
                    terminal '%='
    ruleSpec PlusAssign:'+=';
      lexerRuleSpec PlusAssign:'+=';
        lexerRuleBlock '+='
          lexerAltList '+='
            lexerAlt '+='
              lexerElements '+='
                lexerElement '+='
                  lexerAtom '+='
                    terminal '+='
    ruleSpec MinusAssign:'-=';
      lexerRuleSpec MinusAssign:'-=';
        lexerRuleBlock '-='
          lexerAltList '-='
            lexerAlt '-='
              lexerElements '-='
                lexerElement '-='
                  lexerAtom '-='
                    terminal '-='
    ruleSpec LeftShiftAssign:'<<=';
      lexerRuleSpec LeftShiftAssign:'<<=';
        lexerRuleBlock '<<='
          lexerAltList '<<='
            lexerAlt '<<='
              lexerElements '<<='
                lexerElement '<<='
                  lexerAtom '<<='
                    terminal '<<='
    ruleSpec RightShiftAssign:'>>=';
      lexerRuleSpec RightShiftAssign:'>>=';
        lexerRuleBlock '>>='
          lexerAltList '>>='
            lexerAlt '>>='
              lexerElements '>>='
                lexerElement '>>='
                  lexerAtom '>>='
                    terminal '>>='
    ruleSpec AndAssign:'&=';
      lexerRuleSpec AndAssign:'&=';
        lexerRuleBlock '&='
          lexerAltList '&='
            lexerAlt '&='
              lexerElements '&='
                lexerElement '&='
                  lexerAtom '&='
                    terminal '&='
    ruleSpec XorAssign:'^=';
      lexerRuleSpec XorAssign:'^=';
        lexerRuleBlock '^='
          lexerAltList '^='
            lexerAlt '^='
              lexerElements '^='
                lexerElement '^='
                  lexerAtom '^='
                    terminal '^='
    ruleSpec OrAssign:'|=';
      lexerRuleSpec OrAssign:'|=';
        lexerRuleBlock '|='
          lexerAltList '|='
            lexerAlt '|='
              lexerElements '|='
                lexerElement '|='
                  lexerAtom '|='
                    terminal '|='
    ruleSpec Equal:'==';
      lexerRuleSpec Equal:'==';
        lexerRuleBlock '=='
          lexerAltList '=='
            lexerAlt '=='
              lexerElements '=='
                lexerElement '=='
                  lexerAtom '=='
                    terminal '=='
    ruleSpec NotEqual:'!=';
      lexerRuleSpec NotEqual:'!=';
        lexerRuleBlock '!='
          lexerAltList '!='
            lexerAlt '!='
              lexerElements '!='
                lexerElement '!='
                  lexerAtom '!='
                    terminal '!='
    ruleSpec Arrow:'->';
      lexerRuleSpec Arrow:'->';
        lexerRuleBlock '->'
          lexerAltList '->'
            lexerAlt '->'
              lexerElements '->'
                lexerElement '->'
                  lexerAtom '->'
                    terminal '->'
    ruleSpec Dot:'.';
      lexerRuleSpec Dot:'.';
        lexerRuleBlock '.'
          lexerAltList '.'
            lexerAlt '.'
              lexerElements '.'
                lexerElement '.'
                  lexerAtom '.'
                    terminal '.'
    ruleSpec Ellipsis:'...';
      lexerRuleSpec Ellipsis:'...';
        lexerRuleBlock '...'
          lexerAltList '...'
            lexerAlt '...'
              lexerElements '...'
                lexerElement '...'
                  lexerAtom '...'
                    terminal '...'
    ruleSpec Identifier:IdentifierNondigit(IdentifierNondigit|Digit)*;
      lexerRuleSpec Identifier:IdentifierNondigit(IdentifierNondigit|Digit)*;
        lexerRuleBlock IdentifierNondigit(IdentifierNondigit|Digit)*
          lexerAltList IdentifierNondigit(IdentifierNondigit|Digit)*
            lexerAlt IdentifierNondigit(IdentifierNondigit|Digit)*
              lexerElements IdentifierNondigit(IdentifierNondigit|Digit)*
                lexerElement IdentifierNondigit
                  lexerAtom IdentifierNondigit
                    terminal IdentifierNondigit
                lexerElement (IdentifierNondigit|Digit)*
                  lexerBlock (IdentifierNondigit|Digit)
                    lexerAltList IdentifierNondigit|Digit
                      lexerAlt IdentifierNondigit
                        lexerElements IdentifierNondigit
                          lexerElement IdentifierNondigit
                            lexerAtom IdentifierNondigit
                              terminal IdentifierNondigit
                      lexerAlt Digit
                        lexerElements Digit
                          lexerElement Digit
                            lexerAtom Digit
                              terminal Digit
                  ebnfSuffix *
    ruleSpec fragmentIdentifierNondigit:Nondigit|UniversalCharacterName;
      lexerRuleSpec fragmentIdentifierNondigit:Nondigit|UniversalCharacterName;
        lexerRuleBlock Nondigit|UniversalCharacterName
          lexerAltList Nondigit|UniversalCharacterName
            lexerAlt Nondigit
              lexerElements Nondigit
                lexerElement Nondigit
                  lexerAtom Nondigit
                    terminal Nondigit
            lexerAlt UniversalCharacterName
              lexerElements UniversalCharacterName
                lexerElement UniversalCharacterName
                  lexerAtom UniversalCharacterName
                    terminal UniversalCharacterName
    ruleSpec fragmentNondigit:[a-zA-Z_];
      lexerRuleSpec fragmentNondigit:[a-zA-Z_];
        lexerRuleBlock [a-zA-Z_]
          lexerAltList [a-zA-Z_]
            lexerAlt [a-zA-Z_]
              lexerElements [a-zA-Z_]
                lexerElement [a-zA-Z_]
                  lexerAtom [a-zA-Z_]
    ruleSpec fragmentDigit:[0-9];
      lexerRuleSpec fragmentDigit:[0-9];
        lexerRuleBlock [0-9]
          lexerAltList [0-9]
            lexerAlt [0-9]
              lexerElements [0-9]
                lexerElement [0-9]
                  lexerAtom [0-9]
    ruleSpec fragmentUniversalCharacterName:'\\u'HexQuad|'\\U'HexQuadHexQuad;
      lexerRuleSpec fragmentUniversalCharacterName:'\\u'HexQuad|'\\U'HexQuadHexQuad;
        lexerRuleBlock '\\u'HexQuad|'\\U'HexQuadHexQuad
          lexerAltList '\\u'HexQuad|'\\U'HexQuadHexQuad
            lexerAlt '\\u'HexQuad
              lexerElements '\\u'HexQuad
                lexerElement '\\u'
                  lexerAtom '\\u'
                    terminal '\\u'
                lexerElement HexQuad
                  lexerAtom HexQuad
                    terminal HexQuad
            lexerAlt '\\U'HexQuadHexQuad
              lexerElements '\\U'HexQuadHexQuad
                lexerElement '\\U'
                  lexerAtom '\\U'
                    terminal '\\U'
                lexerElement HexQuad
                  lexerAtom HexQuad
                    terminal HexQuad
                lexerElement HexQuad
                  lexerAtom HexQuad
                    terminal HexQuad
    ruleSpec fragmentHexQuad:HexadecimalDigitHexadecimalDigitHexadecimalDigitHexadecimalDigit;
      lexerRuleSpec fragmentHexQuad:HexadecimalDigitHexadecimalDigitHexadecimalDigitHexadecimalDigit;
        lexerRuleBlock HexadecimalDigitHexadecimalDigitHexadecimalDigitHexadecimalDigit
          lexerAltList HexadecimalDigitHexadecimalDigitHexadecimalDigitHexadecimalDigit
            lexerAlt HexadecimalDigitHexadecimalDigitHexadecimalDigitHexadecimalDigit
              lexerElements HexadecimalDigitHexadecimalDigitHexadecimalDigitHexadecimalDigit
                lexerElement HexadecimalDigit
                  lexerAtom HexadecimalDigit
                    terminal HexadecimalDigit
                lexerElement HexadecimalDigit
                  lexerAtom HexadecimalDigit
                    terminal HexadecimalDigit
                lexerElement HexadecimalDigit
                  lexerAtom HexadecimalDigit
                    terminal HexadecimalDigit
                lexerElement HexadecimalDigit
                  lexerAtom HexadecimalDigit
                    terminal HexadecimalDigit
    ruleSpec Constant:IntegerConstant|FloatingConstant|CharacterConstant;
      lexerRuleSpec Constant:IntegerConstant|FloatingConstant|CharacterConstant;
        lexerRuleBlock IntegerConstant|FloatingConstant|CharacterConstant
          lexerAltList IntegerConstant|FloatingConstant|CharacterConstant
            lexerAlt IntegerConstant
              lexerElements IntegerConstant
                lexerElement IntegerConstant
                  lexerAtom IntegerConstant
                    terminal IntegerConstant
            lexerAlt FloatingConstant
              lexerElements FloatingConstant
                lexerElement FloatingConstant
                  lexerAtom FloatingConstant
                    terminal FloatingConstant
            lexerAlt CharacterConstant
              lexerElements CharacterConstant
                lexerElement CharacterConstant
                  lexerAtom CharacterConstant
                    terminal CharacterConstant
    ruleSpec fragmentIntegerConstant:DecimalConstantIntegerSuffix?|OctalConstantIntegerSuffix?|HexadecimalConstantIntegerSuffix?|BinaryConstant;
      lexerRuleSpec fragmentIntegerConstant:DecimalConstantIntegerSuffix?|OctalConstantIntegerSuffix?|HexadecimalConstantIntegerSuffix?|BinaryConstant;
        lexerRuleBlock DecimalConstantIntegerSuffix?|OctalConstantIntegerSuffix?|HexadecimalConstantIntegerSuffix?|BinaryConstant
          lexerAltList DecimalConstantIntegerSuffix?|OctalConstantIntegerSuffix?|HexadecimalConstantIntegerSuffix?|BinaryConstant
            lexerAlt DecimalConstantIntegerSuffix?
              lexerElements DecimalConstantIntegerSuffix?
                lexerElement DecimalConstant
                  lexerAtom DecimalConstant
                    terminal DecimalConstant
                lexerElement IntegerSuffix?
                  lexerAtom IntegerSuffix
                    terminal IntegerSuffix
                  ebnfSuffix ?
            lexerAlt OctalConstantIntegerSuffix?
              lexerElements OctalConstantIntegerSuffix?
                lexerElement OctalConstant
                  lexerAtom OctalConstant
                    terminal OctalConstant
                lexerElement IntegerSuffix?
                  lexerAtom IntegerSuffix
                    terminal IntegerSuffix
                  ebnfSuffix ?
            lexerAlt HexadecimalConstantIntegerSuffix?
              lexerElements HexadecimalConstantIntegerSuffix?
                lexerElement HexadecimalConstant
                  lexerAtom HexadecimalConstant
                    terminal HexadecimalConstant
                lexerElement IntegerSuffix?
                  lexerAtom IntegerSuffix
                    terminal IntegerSuffix
                  ebnfSuffix ?
            lexerAlt BinaryConstant
              lexerElements BinaryConstant
                lexerElement BinaryConstant
                  lexerAtom BinaryConstant
                    terminal BinaryConstant
    ruleSpec fragmentBinaryConstant:'0'[bB][0-1]+;
      lexerRuleSpec fragmentBinaryConstant:'0'[bB][0-1]+;
        lexerRuleBlock '0'[bB][0-1]+
          lexerAltList '0'[bB][0-1]+
            lexerAlt '0'[bB][0-1]+
              lexerElements '0'[bB][0-1]+
                lexerElement '0'
                  lexerAtom '0'
                    terminal '0'
                lexerElement [bB]
                  lexerAtom [bB]
                lexerElement [0-1]+
                  lexerAtom [0-1]
                  ebnfSuffix +
    ruleSpec fragmentDecimalConstant:NonzeroDigitDigit*;
      lexerRuleSpec fragmentDecimalConstant:NonzeroDigitDigit*;
        lexerRuleBlock NonzeroDigitDigit*
          lexerAltList NonzeroDigitDigit*
            lexerAlt NonzeroDigitDigit*
              lexerElements NonzeroDigitDigit*
                lexerElement NonzeroDigit
                  lexerAtom NonzeroDigit
                    terminal NonzeroDigit
                lexerElement Digit*
                  lexerAtom Digit
                    terminal Digit
                  ebnfSuffix *
    ruleSpec fragmentOctalConstant:'0'OctalDigit*;
      lexerRuleSpec fragmentOctalConstant:'0'OctalDigit*;
        lexerRuleBlock '0'OctalDigit*
          lexerAltList '0'OctalDigit*
            lexerAlt '0'OctalDigit*
              lexerElements '0'OctalDigit*
                lexerElement '0'
                  lexerAtom '0'
                    terminal '0'
                lexerElement OctalDigit*
                  lexerAtom OctalDigit
                    terminal OctalDigit
                  ebnfSuffix *
    ruleSpec fragmentHexadecimalConstant:HexadecimalPrefixHexadecimalDigit+;
      lexerRuleSpec fragmentHexadecimalConstant:HexadecimalPrefixHexadecimalDigit+;
        lexerRuleBlock HexadecimalPrefixHexadecimalDigit+
          lexerAltList HexadecimalPrefixHexadecimalDigit+
            lexerAlt HexadecimalPrefixHexadecimalDigit+
              lexerElements HexadecimalPrefixHexadecimalDigit+
                lexerElement HexadecimalPrefix
                  lexerAtom HexadecimalPrefix
                    terminal HexadecimalPrefix
                lexerElement HexadecimalDigit+
                  lexerAtom HexadecimalDigit
                    terminal HexadecimalDigit
                  ebnfSuffix +
    ruleSpec fragmentHexadecimalPrefix:'0'[xX];
      lexerRuleSpec fragmentHexadecimalPrefix:'0'[xX];
        lexerRuleBlock '0'[xX]
          lexerAltList '0'[xX]
            lexerAlt '0'[xX]
              lexerElements '0'[xX]
                lexerElement '0'
                  lexerAtom '0'
                    terminal '0'
                lexerElement [xX]
                  lexerAtom [xX]
    ruleSpec fragmentNonzeroDigit:[1-9];
      lexerRuleSpec fragmentNonzeroDigit:[1-9];
        lexerRuleBlock [1-9]
          lexerAltList [1-9]
            lexerAlt [1-9]
              lexerElements [1-9]
                lexerElement [1-9]
                  lexerAtom [1-9]
    ruleSpec fragmentOctalDigit:[0-7];
      lexerRuleSpec fragmentOctalDigit:[0-7];
        lexerRuleBlock [0-7]
          lexerAltList [0-7]
            lexerAlt [0-7]
              lexerElements [0-7]
                lexerElement [0-7]
                  lexerAtom [0-7]
    ruleSpec fragmentHexadecimalDigit:[0-9a-fA-F];
      lexerRuleSpec fragmentHexadecimalDigit:[0-9a-fA-F];
        lexerRuleBlock [0-9a-fA-F]
          lexerAltList [0-9a-fA-F]
            lexerAlt [0-9a-fA-F]
              lexerElements [0-9a-fA-F]
                lexerElement [0-9a-fA-F]
                  lexerAtom [0-9a-fA-F]
    ruleSpec fragmentIntegerSuffix:UnsignedSuffixLongSuffix?|UnsignedSuffixLongLongSuffix|LongSuffixUnsignedSuffix?|LongLongSuffixUnsignedSuffix?;
      lexerRuleSpec fragmentIntegerSuffix:UnsignedSuffixLongSuffix?|UnsignedSuffixLongLongSuffix|LongSuffixUnsignedSuffix?|LongLongSuffixUnsignedSuffix?;
        lexerRuleBlock UnsignedSuffixLongSuffix?|UnsignedSuffixLongLongSuffix|LongSuffixUnsignedSuffix?|LongLongSuffixUnsignedSuffix?
          lexerAltList UnsignedSuffixLongSuffix?|UnsignedSuffixLongLongSuffix|LongSuffixUnsignedSuffix?|LongLongSuffixUnsignedSuffix?
            lexerAlt UnsignedSuffixLongSuffix?
              lexerElements UnsignedSuffixLongSuffix?
                lexerElement UnsignedSuffix
                  lexerAtom UnsignedSuffix
                    terminal UnsignedSuffix
                lexerElement LongSuffix?
                  lexerAtom LongSuffix
                    terminal LongSuffix
                  ebnfSuffix ?
            lexerAlt UnsignedSuffixLongLongSuffix
              lexerElements UnsignedSuffixLongLongSuffix
                lexerElement UnsignedSuffix
                  lexerAtom UnsignedSuffix
                    terminal UnsignedSuffix
                lexerElement LongLongSuffix
                  lexerAtom LongLongSuffix
                    terminal LongLongSuffix
            lexerAlt LongSuffixUnsignedSuffix?
              lexerElements LongSuffixUnsignedSuffix?
                lexerElement LongSuffix
                  lexerAtom LongSuffix
                    terminal LongSuffix
                lexerElement UnsignedSuffix?
                  lexerAtom UnsignedSuffix
                    terminal UnsignedSuffix
                  ebnfSuffix ?
            lexerAlt LongLongSuffixUnsignedSuffix?
              lexerElements LongLongSuffixUnsignedSuffix?
                lexerElement LongLongSuffix
                  lexerAtom LongLongSuffix
                    terminal LongLongSuffix
                lexerElement UnsignedSuffix?
                  lexerAtom UnsignedSuffix
                    terminal UnsignedSuffix
                  ebnfSuffix ?
    ruleSpec fragmentUnsignedSuffix:[uU];
      lexerRuleSpec fragmentUnsignedSuffix:[uU];
        lexerRuleBlock [uU]
          lexerAltList [uU]
            lexerAlt [uU]
              lexerElements [uU]
                lexerElement [uU]
                  lexerAtom [uU]
    ruleSpec fragmentLongSuffix:[lL];
      lexerRuleSpec fragmentLongSuffix:[lL];
        lexerRuleBlock [lL]
          lexerAltList [lL]
            lexerAlt [lL]
              lexerElements [lL]
                lexerElement [lL]
                  lexerAtom [lL]
    ruleSpec fragmentLongLongSuffix:'ll'|'LL';
      lexerRuleSpec fragmentLongLongSuffix:'ll'|'LL';
        lexerRuleBlock 'll'|'LL'
          lexerAltList 'll'|'LL'
            lexerAlt 'll'
              lexerElements 'll'
                lexerElement 'll'
                  lexerAtom 'll'
                    terminal 'll'
            lexerAlt 'LL'
              lexerElements 'LL'
                lexerElement 'LL'
                  lexerAtom 'LL'
                    terminal 'LL'
    ruleSpec fragmentFloatingConstant:DecimalFloatingConstant|HexadecimalFloatingConstant;
      lexerRuleSpec fragmentFloatingConstant:DecimalFloatingConstant|HexadecimalFloatingConstant;
        lexerRuleBlock DecimalFloatingConstant|HexadecimalFloatingConstant
          lexerAltList DecimalFloatingConstant|HexadecimalFloatingConstant
            lexerAlt DecimalFloatingConstant
              lexerElements DecimalFloatingConstant
                lexerElement DecimalFloatingConstant
                  lexerAtom DecimalFloatingConstant
                    terminal DecimalFloatingConstant
            lexerAlt HexadecimalFloatingConstant
              lexerElements HexadecimalFloatingConstant
                lexerElement HexadecimalFloatingConstant
                  lexerAtom HexadecimalFloatingConstant
                    terminal HexadecimalFloatingConstant
    ruleSpec fragmentDecimalFloatingConstant:FractionalConstantExponentPart?FloatingSuffix?|DigitSequenceExponentPartFloatingSuffix?;
      lexerRuleSpec fragmentDecimalFloatingConstant:FractionalConstantExponentPart?FloatingSuffix?|DigitSequenceExponentPartFloatingSuffix?;
        lexerRuleBlock FractionalConstantExponentPart?FloatingSuffix?|DigitSequenceExponentPartFloatingSuffix?
          lexerAltList FractionalConstantExponentPart?FloatingSuffix?|DigitSequenceExponentPartFloatingSuffix?
            lexerAlt FractionalConstantExponentPart?FloatingSuffix?
              lexerElements FractionalConstantExponentPart?FloatingSuffix?
                lexerElement FractionalConstant
                  lexerAtom FractionalConstant
                    terminal FractionalConstant
                lexerElement ExponentPart?
                  lexerAtom ExponentPart
                    terminal ExponentPart
                  ebnfSuffix ?
                lexerElement FloatingSuffix?
                  lexerAtom FloatingSuffix
                    terminal FloatingSuffix
                  ebnfSuffix ?
            lexerAlt DigitSequenceExponentPartFloatingSuffix?
              lexerElements DigitSequenceExponentPartFloatingSuffix?
                lexerElement DigitSequence
                  lexerAtom DigitSequence
                    terminal DigitSequence
                lexerElement ExponentPart
                  lexerAtom ExponentPart
                    terminal ExponentPart
                lexerElement FloatingSuffix?
                  lexerAtom FloatingSuffix
                    terminal FloatingSuffix
                  ebnfSuffix ?
    ruleSpec fragmentHexadecimalFloatingConstant:HexadecimalPrefixHexadecimalFractionalConstantBinaryExponentPartFloatingSuffix?|HexadecimalPrefixHexadecimalDigitSequenceBinaryExponentPartFloatingSuffix?;
      lexerRuleSpec fragmentHexadecimalFloatingConstant:HexadecimalPrefixHexadecimalFractionalConstantBinaryExponentPartFloatingSuffix?|HexadecimalPrefixHexadecimalDigitSequenceBinaryExponentPartFloatingSuffix?;
        lexerRuleBlock HexadecimalPrefixHexadecimalFractionalConstantBinaryExponentPartFloatingSuffix?|HexadecimalPrefixHexadecimalDigitSequenceBinaryExponentPartFloatingSuffix?
          lexerAltList HexadecimalPrefixHexadecimalFractionalConstantBinaryExponentPartFloatingSuffix?|HexadecimalPrefixHexadecimalDigitSequenceBinaryExponentPartFloatingSuffix?
            lexerAlt HexadecimalPrefixHexadecimalFractionalConstantBinaryExponentPartFloatingSuffix?
              lexerElements HexadecimalPrefixHexadecimalFractionalConstantBinaryExponentPartFloatingSuffix?
                lexerElement HexadecimalPrefix
                  lexerAtom HexadecimalPrefix
                    terminal HexadecimalPrefix
                lexerElement HexadecimalFractionalConstant
                  lexerAtom HexadecimalFractionalConstant
                    terminal HexadecimalFractionalConstant
                lexerElement BinaryExponentPart
                  lexerAtom BinaryExponentPart
                    terminal BinaryExponentPart
                lexerElement FloatingSuffix?
                  lexerAtom FloatingSuffix
                    terminal FloatingSuffix
                  ebnfSuffix ?
            lexerAlt HexadecimalPrefixHexadecimalDigitSequenceBinaryExponentPartFloatingSuffix?
              lexerElements HexadecimalPrefixHexadecimalDigitSequenceBinaryExponentPartFloatingSuffix?
                lexerElement HexadecimalPrefix
                  lexerAtom HexadecimalPrefix
                    terminal HexadecimalPrefix
                lexerElement HexadecimalDigitSequence
                  lexerAtom HexadecimalDigitSequence
                    terminal HexadecimalDigitSequence
                lexerElement BinaryExponentPart
                  lexerAtom BinaryExponentPart
                    terminal BinaryExponentPart
                lexerElement FloatingSuffix?
                  lexerAtom FloatingSuffix
                    terminal FloatingSuffix
                  ebnfSuffix ?
    ruleSpec fragmentFractionalConstant:DigitSequence?'.'DigitSequence|DigitSequence'.';
      lexerRuleSpec fragmentFractionalConstant:DigitSequence?'.'DigitSequence|DigitSequence'.';
        lexerRuleBlock DigitSequence?'.'DigitSequence|DigitSequence'.'
          lexerAltList DigitSequence?'.'DigitSequence|DigitSequence'.'
            lexerAlt DigitSequence?'.'DigitSequence
              lexerElements DigitSequence?'.'DigitSequence
                lexerElement DigitSequence?
                  lexerAtom DigitSequence
                    terminal DigitSequence
                  ebnfSuffix ?
                lexerElement '.'
                  lexerAtom '.'
                    terminal '.'
                lexerElement DigitSequence
                  lexerAtom DigitSequence
                    terminal DigitSequence
            lexerAlt DigitSequence'.'
              lexerElements DigitSequence'.'
                lexerElement DigitSequence
                  lexerAtom DigitSequence
                    terminal DigitSequence
                lexerElement '.'
                  lexerAtom '.'
                    terminal '.'
    ruleSpec fragmentExponentPart:'e'Sign?DigitSequence|'E'Sign?DigitSequence;
      lexerRuleSpec fragmentExponentPart:'e'Sign?DigitSequence|'E'Sign?DigitSequence;
        lexerRuleBlock 'e'Sign?DigitSequence|'E'Sign?DigitSequence
          lexerAltList 'e'Sign?DigitSequence|'E'Sign?DigitSequence
            lexerAlt 'e'Sign?DigitSequence
              lexerElements 'e'Sign?DigitSequence
                lexerElement 'e'
                  lexerAtom 'e'
                    terminal 'e'
                lexerElement Sign?
                  lexerAtom Sign
                    terminal Sign
                  ebnfSuffix ?
                lexerElement DigitSequence
                  lexerAtom DigitSequence
                    terminal DigitSequence
            lexerAlt 'E'Sign?DigitSequence
              lexerElements 'E'Sign?DigitSequence
                lexerElement 'E'
                  lexerAtom 'E'
                    terminal 'E'
                lexerElement Sign?
                  lexerAtom Sign
                    terminal Sign
                  ebnfSuffix ?
                lexerElement DigitSequence
                  lexerAtom DigitSequence
                    terminal DigitSequence
    ruleSpec fragmentSign:'+'|'-';
      lexerRuleSpec fragmentSign:'+'|'-';
        lexerRuleBlock '+'|'-'
          lexerAltList '+'|'-'
            lexerAlt '+'
              lexerElements '+'
                lexerElement '+'
                  lexerAtom '+'
                    terminal '+'
            lexerAlt '-'
              lexerElements '-'
                lexerElement '-'
                  lexerAtom '-'
                    terminal '-'
    ruleSpec DigitSequence:Digit+;
      lexerRuleSpec DigitSequence:Digit+;
        lexerRuleBlock Digit+
          lexerAltList Digit+
            lexerAlt Digit+
              lexerElements Digit+
                lexerElement Digit+
                  lexerAtom Digit
                    terminal Digit
                  ebnfSuffix +
    ruleSpec fragmentHexadecimalFractionalConstant:HexadecimalDigitSequence?'.'HexadecimalDigitSequence|HexadecimalDigitSequence'.';
      lexerRuleSpec fragmentHexadecimalFractionalConstant:HexadecimalDigitSequence?'.'HexadecimalDigitSequence|HexadecimalDigitSequence'.';
        lexerRuleBlock HexadecimalDigitSequence?'.'HexadecimalDigitSequence|HexadecimalDigitSequence'.'
          lexerAltList HexadecimalDigitSequence?'.'HexadecimalDigitSequence|HexadecimalDigitSequence'.'
            lexerAlt HexadecimalDigitSequence?'.'HexadecimalDigitSequence
              lexerElements HexadecimalDigitSequence?'.'HexadecimalDigitSequence
                lexerElement HexadecimalDigitSequence?
                  lexerAtom HexadecimalDigitSequence
                    terminal HexadecimalDigitSequence
                  ebnfSuffix ?
                lexerElement '.'
                  lexerAtom '.'
                    terminal '.'
                lexerElement HexadecimalDigitSequence
                  lexerAtom HexadecimalDigitSequence
                    terminal HexadecimalDigitSequence
            lexerAlt HexadecimalDigitSequence'.'
              lexerElements HexadecimalDigitSequence'.'
                lexerElement HexadecimalDigitSequence
                  lexerAtom HexadecimalDigitSequence
                    terminal HexadecimalDigitSequence
                lexerElement '.'
                  lexerAtom '.'
                    terminal '.'
    ruleSpec fragmentBinaryExponentPart:'p'Sign?DigitSequence|'P'Sign?DigitSequence;
      lexerRuleSpec fragmentBinaryExponentPart:'p'Sign?DigitSequence|'P'Sign?DigitSequence;
        lexerRuleBlock 'p'Sign?DigitSequence|'P'Sign?DigitSequence
          lexerAltList 'p'Sign?DigitSequence|'P'Sign?DigitSequence
            lexerAlt 'p'Sign?DigitSequence
              lexerElements 'p'Sign?DigitSequence
                lexerElement 'p'
                  lexerAtom 'p'
                    terminal 'p'
                lexerElement Sign?
                  lexerAtom Sign
                    terminal Sign
                  ebnfSuffix ?
                lexerElement DigitSequence
                  lexerAtom DigitSequence
                    terminal DigitSequence
            lexerAlt 'P'Sign?DigitSequence
              lexerElements 'P'Sign?DigitSequence
                lexerElement 'P'
                  lexerAtom 'P'
                    terminal 'P'
                lexerElement Sign?
                  lexerAtom Sign
                    terminal Sign
                  ebnfSuffix ?
                lexerElement DigitSequence
                  lexerAtom DigitSequence
                    terminal DigitSequence
    ruleSpec fragmentHexadecimalDigitSequence:HexadecimalDigit+;
      lexerRuleSpec fragmentHexadecimalDigitSequence:HexadecimalDigit+;
        lexerRuleBlock HexadecimalDigit+
          lexerAltList HexadecimalDigit+
            lexerAlt HexadecimalDigit+
              lexerElements HexadecimalDigit+
                lexerElement HexadecimalDigit+
                  lexerAtom HexadecimalDigit
                    terminal HexadecimalDigit
                  ebnfSuffix +
    ruleSpec fragmentFloatingSuffix:'f'|'l'|'F'|'L';
      lexerRuleSpec fragmentFloatingSuffix:'f'|'l'|'F'|'L';
        lexerRuleBlock 'f'|'l'|'F'|'L'
          lexerAltList 'f'|'l'|'F'|'L'
            lexerAlt 'f'
              lexerElements 'f'
                lexerElement 'f'
                  lexerAtom 'f'
                    terminal 'f'
            lexerAlt 'l'
              lexerElements 'l'
                lexerElement 'l'
                  lexerAtom 'l'
                    terminal 'l'
            lexerAlt 'F'
              lexerElements 'F'
                lexerElement 'F'
                  lexerAtom 'F'
                    terminal 'F'
            lexerAlt 'L'
              lexerElements 'L'
                lexerElement 'L'
                  lexerAtom 'L'
                    terminal 'L'
    ruleSpec fragmentCharacterConstant:'\''CCharSequence'\''|'L\''CCharSequence'\''|'u\''CCharSequence'\''|'U\''CCharSequence'\'';
      lexerRuleSpec fragmentCharacterConstant:'\''CCharSequence'\''|'L\''CCharSequence'\''|'u\''CCharSequence'\''|'U\''CCharSequence'\'';
        lexerRuleBlock '\''CCharSequence'\''|'L\''CCharSequence'\''|'u\''CCharSequence'\''|'U\''CCharSequence'\''
          lexerAltList '\''CCharSequence'\''|'L\''CCharSequence'\''|'u\''CCharSequence'\''|'U\''CCharSequence'\''
            lexerAlt '\''CCharSequence'\''
              lexerElements '\''CCharSequence'\''
                lexerElement '\''
                  lexerAtom '\''
                    terminal '\''
                lexerElement CCharSequence
                  lexerAtom CCharSequence
                    terminal CCharSequence
                lexerElement '\''
                  lexerAtom '\''
                    terminal '\''
            lexerAlt 'L\''CCharSequence'\''
              lexerElements 'L\''CCharSequence'\''
                lexerElement 'L\''
                  lexerAtom 'L\''
                    terminal 'L\''
                lexerElement CCharSequence
                  lexerAtom CCharSequence
                    terminal CCharSequence
                lexerElement '\''
                  lexerAtom '\''
                    terminal '\''
            lexerAlt 'u\''CCharSequence'\''
              lexerElements 'u\''CCharSequence'\''
                lexerElement 'u\''
                  lexerAtom 'u\''
                    terminal 'u\''
                lexerElement CCharSequence
                  lexerAtom CCharSequence
                    terminal CCharSequence
                lexerElement '\''
                  lexerAtom '\''
                    terminal '\''
            lexerAlt 'U\''CCharSequence'\''
              lexerElements 'U\''CCharSequence'\''
                lexerElement 'U\''
                  lexerAtom 'U\''
                    terminal 'U\''
                lexerElement CCharSequence
                  lexerAtom CCharSequence
                    terminal CCharSequence
                lexerElement '\''
                  lexerAtom '\''
                    terminal '\''
    ruleSpec fragmentCCharSequence:CChar+;
      lexerRuleSpec fragmentCCharSequence:CChar+;
        lexerRuleBlock CChar+
          lexerAltList CChar+
            lexerAlt CChar+
              lexerElements CChar+
                lexerElement CChar+
                  lexerAtom CChar
                    terminal CChar
                  ebnfSuffix +
    ruleSpec fragmentCChar:~['\\\r\n]|EscapeSequence;
      lexerRuleSpec fragmentCChar:~['\\\r\n]|EscapeSequence;
        lexerRuleBlock ~['\\\r\n]|EscapeSequence
          lexerAltList ~['\\\r\n]|EscapeSequence
            lexerAlt ~['\\\r\n]
              lexerElements ~['\\\r\n]
                lexerElement ~['\\\r\n]
                  lexerAtom ~['\\\r\n]
                    notSet ~['\\\r\n]
                      setElement ['\\\r\n]
            lexerAlt EscapeSequence
              lexerElements EscapeSequence
                lexerElement EscapeSequence
                  lexerAtom EscapeSequence
                    terminal EscapeSequence
    ruleSpec fragmentEscapeSequence:SimpleEscapeSequence|OctalEscapeSequence|HexadecimalEscapeSequence|UniversalCharacterName;
      lexerRuleSpec fragmentEscapeSequence:SimpleEscapeSequence|OctalEscapeSequence|HexadecimalEscapeSequence|UniversalCharacterName;
        lexerRuleBlock SimpleEscapeSequence|OctalEscapeSequence|HexadecimalEscapeSequence|UniversalCharacterName
          lexerAltList SimpleEscapeSequence|OctalEscapeSequence|HexadecimalEscapeSequence|UniversalCharacterName
            lexerAlt SimpleEscapeSequence
              lexerElements SimpleEscapeSequence
                lexerElement SimpleEscapeSequence
                  lexerAtom SimpleEscapeSequence
                    terminal SimpleEscapeSequence
            lexerAlt OctalEscapeSequence
              lexerElements OctalEscapeSequence
                lexerElement OctalEscapeSequence
                  lexerAtom OctalEscapeSequence
                    terminal OctalEscapeSequence
            lexerAlt HexadecimalEscapeSequence
              lexerElements HexadecimalEscapeSequence
                lexerElement HexadecimalEscapeSequence
                  lexerAtom HexadecimalEscapeSequence
                    terminal HexadecimalEscapeSequence
            lexerAlt UniversalCharacterName
              lexerElements UniversalCharacterName
                lexerElement UniversalCharacterName
                  lexerAtom UniversalCharacterName
                    terminal UniversalCharacterName
    ruleSpec fragmentSimpleEscapeSequence:'\\'['"?abfnrtv\\];
      lexerRuleSpec fragmentSimpleEscapeSequence:'\\'['"?abfnrtv\\];
        lexerRuleBlock '\\'['"?abfnrtv\\]
          lexerAltList '\\'['"?abfnrtv\\]
            lexerAlt '\\'['"?abfnrtv\\]
              lexerElements '\\'['"?abfnrtv\\]
                lexerElement '\\'
                  lexerAtom '\\'
                    terminal '\\'
                lexerElement ['"?abfnrtv\\]
                  lexerAtom ['"?abfnrtv\\]
    ruleSpec fragmentOctalEscapeSequence:'\\'OctalDigit|'\\'OctalDigitOctalDigit|'\\'OctalDigitOctalDigitOctalDigit;
      lexerRuleSpec fragmentOctalEscapeSequence:'\\'OctalDigit|'\\'OctalDigitOctalDigit|'\\'OctalDigitOctalDigitOctalDigit;
        lexerRuleBlock '\\'OctalDigit|'\\'OctalDigitOctalDigit|'\\'OctalDigitOctalDigitOctalDigit
          lexerAltList '\\'OctalDigit|'\\'OctalDigitOctalDigit|'\\'OctalDigitOctalDigitOctalDigit
            lexerAlt '\\'OctalDigit
              lexerElements '\\'OctalDigit
                lexerElement '\\'
                  lexerAtom '\\'
                    terminal '\\'
                lexerElement OctalDigit
                  lexerAtom OctalDigit
                    terminal OctalDigit
            lexerAlt '\\'OctalDigitOctalDigit
              lexerElements '\\'OctalDigitOctalDigit
                lexerElement '\\'
                  lexerAtom '\\'
                    terminal '\\'
                lexerElement OctalDigit
                  lexerAtom OctalDigit
                    terminal OctalDigit
                lexerElement OctalDigit
                  lexerAtom OctalDigit
                    terminal OctalDigit
            lexerAlt '\\'OctalDigitOctalDigitOctalDigit
              lexerElements '\\'OctalDigitOctalDigitOctalDigit
                lexerElement '\\'
                  lexerAtom '\\'
                    terminal '\\'
                lexerElement OctalDigit
                  lexerAtom OctalDigit
                    terminal OctalDigit
                lexerElement OctalDigit
                  lexerAtom OctalDigit
                    terminal OctalDigit
                lexerElement OctalDigit
                  lexerAtom OctalDigit
                    terminal OctalDigit
    ruleSpec fragmentHexadecimalEscapeSequence:'\\x'HexadecimalDigit+;
      lexerRuleSpec fragmentHexadecimalEscapeSequence:'\\x'HexadecimalDigit+;
        lexerRuleBlock '\\x'HexadecimalDigit+
          lexerAltList '\\x'HexadecimalDigit+
            lexerAlt '\\x'HexadecimalDigit+
              lexerElements '\\x'HexadecimalDigit+
                lexerElement '\\x'
                  lexerAtom '\\x'
                    terminal '\\x'
                lexerElement HexadecimalDigit+
                  lexerAtom HexadecimalDigit
                    terminal HexadecimalDigit
                  ebnfSuffix +
    ruleSpec StringLiteral:EncodingPrefix?'"'SCharSequence?'"';
      lexerRuleSpec StringLiteral:EncodingPrefix?'"'SCharSequence?'"';
        lexerRuleBlock EncodingPrefix?'"'SCharSequence?'"'
          lexerAltList EncodingPrefix?'"'SCharSequence?'"'
            lexerAlt EncodingPrefix?'"'SCharSequence?'"'
              lexerElements EncodingPrefix?'"'SCharSequence?'"'
                lexerElement EncodingPrefix?
                  lexerAtom EncodingPrefix
                    terminal EncodingPrefix
                  ebnfSuffix ?
                lexerElement '"'
                  lexerAtom '"'
                    terminal '"'
                lexerElement SCharSequence?
                  lexerAtom SCharSequence
                    terminal SCharSequence
                  ebnfSuffix ?
                lexerElement '"'
                  lexerAtom '"'
                    terminal '"'
    ruleSpec fragmentEncodingPrefix:'u8'|'u'|'U'|'L';
      lexerRuleSpec fragmentEncodingPrefix:'u8'|'u'|'U'|'L';
        lexerRuleBlock 'u8'|'u'|'U'|'L'
          lexerAltList 'u8'|'u'|'U'|'L'
            lexerAlt 'u8'
              lexerElements 'u8'
                lexerElement 'u8'
                  lexerAtom 'u8'
                    terminal 'u8'
            lexerAlt 'u'
              lexerElements 'u'
                lexerElement 'u'
                  lexerAtom 'u'
                    terminal 'u'
            lexerAlt 'U'
              lexerElements 'U'
                lexerElement 'U'
                  lexerAtom 'U'
                    terminal 'U'
            lexerAlt 'L'
              lexerElements 'L'
                lexerElement 'L'
                  lexerAtom 'L'
                    terminal 'L'
    ruleSpec fragmentSCharSequence:SChar+;
      lexerRuleSpec fragmentSCharSequence:SChar+;
        lexerRuleBlock SChar+
          lexerAltList SChar+
            lexerAlt SChar+
              lexerElements SChar+
                lexerElement SChar+
                  lexerAtom SChar
                    terminal SChar
                  ebnfSuffix +
    ruleSpec fragmentSChar:~["\\\r\n]|EscapeSequence|'\\\n'|'\\\r\n';
      lexerRuleSpec fragmentSChar:~["\\\r\n]|EscapeSequence|'\\\n'|'\\\r\n';
        lexerRuleBlock ~["\\\r\n]|EscapeSequence|'\\\n'|'\\\r\n'
          lexerAltList ~["\\\r\n]|EscapeSequence|'\\\n'|'\\\r\n'
            lexerAlt ~["\\\r\n]
              lexerElements ~["\\\r\n]
                lexerElement ~["\\\r\n]
                  lexerAtom ~["\\\r\n]
                    notSet ~["\\\r\n]
                      setElement ["\\\r\n]
            lexerAlt EscapeSequence
              lexerElements EscapeSequence
                lexerElement EscapeSequence
                  lexerAtom EscapeSequence
                    terminal EscapeSequence
            lexerAlt '\\\n'
              lexerElements '\\\n'
                lexerElement '\\\n'
                  lexerAtom '\\\n'
                    terminal '\\\n'
            lexerAlt '\\\r\n'
              lexerElements '\\\r\n'
                lexerElement '\\\r\n'
                  lexerAtom '\\\r\n'
                    terminal '\\\r\n'
    ruleSpec ComplexDefine:'#'Whitespace?'define'~[#]*->skip;
      lexerRuleSpec ComplexDefine:'#'Whitespace?'define'~[#]*->skip;
        lexerRuleBlock '#'Whitespace?'define'~[#]*->skip
          lexerAltList '#'Whitespace?'define'~[#]*->skip
            lexerAlt '#'Whitespace?'define'~[#]*->skip
              lexerElements '#'Whitespace?'define'~[#]*
                lexerElement '#'
                  lexerAtom '#'
                    terminal '#'
                lexerElement Whitespace?
                  lexerAtom Whitespace
                    terminal Whitespace
                  ebnfSuffix ?
                lexerElement 'define'
                  lexerAtom 'define'
                    terminal 'define'
                lexerElement ~[#]*
                  lexerAtom ~[#]
                    notSet ~[#]
                      setElement [#]
                  ebnfSuffix *
              lexerCommands ->skip
                lexerCommand skip
                  lexerCommandName skip
                    identifier skip
    ruleSpec AsmBlock:'asm'~'{'*'{'~'}'*'}'->skip;
      lexerRuleSpec AsmBlock:'asm'~'{'*'{'~'}'*'}'->skip;
        lexerRuleBlock 'asm'~'{'*'{'~'}'*'}'->skip
          lexerAltList 'asm'~'{'*'{'~'}'*'}'->skip
            lexerAlt 'asm'~'{'*'{'~'}'*'}'->skip
              lexerElements 'asm'~'{'*'{'~'}'*'}'
                lexerElement 'asm'
                  lexerAtom 'asm'
                    terminal 'asm'
                lexerElement ~'{'*
                  lexerAtom ~'{'
                    notSet ~'{'
                      setElement '{'
                  ebnfSuffix *
                lexerElement '{'
                  lexerAtom '{'
                    terminal '{'
                lexerElement ~'}'*
                  lexerAtom ~'}'
                    notSet ~'}'
                      setElement '}'
                  ebnfSuffix *
                lexerElement '}'
                  lexerAtom '}'
                    terminal '}'
              lexerCommands ->skip
                lexerCommand skip
                  lexerCommandName skip
                    identifier skip
    ruleSpec LineAfterPreprocessing:'#line'Whitespace*~[\r\n]*->skip;
      lexerRuleSpec LineAfterPreprocessing:'#line'Whitespace*~[\r\n]*->skip;
        lexerRuleBlock '#line'Whitespace*~[\r\n]*->skip
          lexerAltList '#line'Whitespace*~[\r\n]*->skip
            lexerAlt '#line'Whitespace*~[\r\n]*->skip
              lexerElements '#line'Whitespace*~[\r\n]*
                lexerElement '#line'
                  lexerAtom '#line'
                    terminal '#line'
                lexerElement Whitespace*
                  lexerAtom Whitespace
                    terminal Whitespace
                  ebnfSuffix *
                lexerElement ~[\r\n]*
                  lexerAtom ~[\r\n]
                    notSet ~[\r\n]
                      setElement [\r\n]
                  ebnfSuffix *
              lexerCommands ->skip
                lexerCommand skip
                  lexerCommandName skip
                    identifier skip
    ruleSpec LineDirective:'#'Whitespace?DecimalConstantWhitespace?StringLiteral~[\r\n]*->skip;
      lexerRuleSpec LineDirective:'#'Whitespace?DecimalConstantWhitespace?StringLiteral~[\r\n]*->skip;
        lexerRuleBlock '#'Whitespace?DecimalConstantWhitespace?StringLiteral~[\r\n]*->skip
          lexerAltList '#'Whitespace?DecimalConstantWhitespace?StringLiteral~[\r\n]*->skip
            lexerAlt '#'Whitespace?DecimalConstantWhitespace?StringLiteral~[\r\n]*->skip
              lexerElements '#'Whitespace?DecimalConstantWhitespace?StringLiteral~[\r\n]*
                lexerElement '#'
                  lexerAtom '#'
                    terminal '#'
                lexerElement Whitespace?
                  lexerAtom Whitespace
                    terminal Whitespace
                  ebnfSuffix ?
                lexerElement DecimalConstant
                  lexerAtom DecimalConstant
                    terminal DecimalConstant
                lexerElement Whitespace?
                  lexerAtom Whitespace
                    terminal Whitespace
                  ebnfSuffix ?
                lexerElement StringLiteral
                  lexerAtom StringLiteral
                    terminal StringLiteral
                lexerElement ~[\r\n]*
                  lexerAtom ~[\r\n]
                    notSet ~[\r\n]
                      setElement [\r\n]
                  ebnfSuffix *
              lexerCommands ->skip
                lexerCommand skip
                  lexerCommandName skip
                    identifier skip
    ruleSpec PragmaDirective:'#'Whitespace?'pragma'Whitespace~[\r\n]*->skip;
      lexerRuleSpec PragmaDirective:'#'Whitespace?'pragma'Whitespace~[\r\n]*->skip;
        lexerRuleBlock '#'Whitespace?'pragma'Whitespace~[\r\n]*->skip
          lexerAltList '#'Whitespace?'pragma'Whitespace~[\r\n]*->skip
            lexerAlt '#'Whitespace?'pragma'Whitespace~[\r\n]*->skip
              lexerElements '#'Whitespace?'pragma'Whitespace~[\r\n]*
                lexerElement '#'
                  lexerAtom '#'
                    terminal '#'
                lexerElement Whitespace?
                  lexerAtom Whitespace
                    terminal Whitespace
                  ebnfSuffix ?
                lexerElement 'pragma'
                  lexerAtom 'pragma'
                    terminal 'pragma'
                lexerElement Whitespace
                  lexerAtom Whitespace
                    terminal Whitespace
                lexerElement ~[\r\n]*
                  lexerAtom ~[\r\n]
                    notSet ~[\r\n]
                      setElement [\r\n]
                  ebnfSuffix *
              lexerCommands ->skip
                lexerCommand skip
                  lexerCommandName skip
                    identifier skip
    ruleSpec Whitespace:[ \t]+->skip;
      lexerRuleSpec Whitespace:[ \t]+->skip;
        lexerRuleBlock [ \t]+->skip
          lexerAltList [ \t]+->skip
            lexerAlt [ \t]+->skip
              lexerElements [ \t]+
                lexerElement [ \t]+
                  lexerAtom [ \t]
                  ebnfSuffix +
              lexerCommands ->skip
                lexerCommand skip
                  lexerCommandName skip
                    identifier skip
    ruleSpec Newline:('\r''\n'?|'\n')->skip;
      lexerRuleSpec Newline:('\r''\n'?|'\n')->skip;
        lexerRuleBlock ('\r''\n'?|'\n')->skip
          lexerAltList ('\r''\n'?|'\n')->skip
            lexerAlt ('\r''\n'?|'\n')->skip
              lexerElements ('\r''\n'?|'\n')
                lexerElement ('\r''\n'?|'\n')
                  lexerBlock ('\r''\n'?|'\n')
                    lexerAltList '\r''\n'?|'\n'
                      lexerAlt '\r''\n'?
                        lexerElements '\r''\n'?
                          lexerElement '\r'
                            lexerAtom '\r'
                              terminal '\r'
                          lexerElement '\n'?
                            lexerAtom '\n'
                              terminal '\n'
                            ebnfSuffix ?
                      lexerAlt '\n'
                        lexerElements '\n'
                          lexerElement '\n'
                            lexerAtom '\n'
                              terminal '\n'
              lexerCommands ->skip
                lexerCommand skip
                  lexerCommandName skip
                    identifier skip
    ruleSpec BlockComment:'/*'.*?'*/'->skip;
      lexerRuleSpec BlockComment:'/*'.*?'*/'->skip;
        lexerRuleBlock '/*'.*?'*/'->skip
          lexerAltList '/*'.*?'*/'->skip
            lexerAlt '/*'.*?'*/'->skip
              lexerElements '/*'.*?'*/'
                lexerElement '/*'
                  lexerAtom '/*'
                    terminal '/*'
                lexerElement .*?
                  lexerAtom .
                  ebnfSuffix *?
                lexerElement '*/'
                  lexerAtom '*/'
                    terminal '*/'
              lexerCommands ->skip
                lexerCommand skip
                  lexerCommandName skip
                    identifier skip
    ruleSpec LineComment:'//'~[\r\n]*->skip;
      lexerRuleSpec LineComment:'//'~[\r\n]*->skip;
        lexerRuleBlock '//'~[\r\n]*->skip
          lexerAltList '//'~[\r\n]*->skip
            lexerAlt '//'~[\r\n]*->skip
              lexerElements '//'~[\r\n]*
                lexerElement '//'
                  lexerAtom '//'
                    terminal '//'
                lexerElement ~[\r\n]*
                  lexerAtom ~[\r\n]
                    notSet ~[\r\n]
                      setElement [\r\n]
                  ebnfSuffix *
              lexerCommands ->skip
                lexerCommand skip
                  lexerCommandName skip
                    identifier skip

�v���Z�X�͏I���R�[�h 0 �Ŋ������܂���
